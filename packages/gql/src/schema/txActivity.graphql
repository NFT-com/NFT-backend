
enum ActivityType {
  Listing 
  Bid
  Cancel
  Sale
  Transfer
}

type TxActivity {
  id: ID!
  chainId: String
  activityType: String!
  activityTypeId: String!
  read: Boolean!
  timestamp: Date!
  walletAddress: String!
  order: TxOrder
  cancel: TxCancel
}

type TxCancel {
  id: ID!
  exchange: String!
  foreignType: String!
  foreignKeyId: String!
  transactionHash: String!
}

type TxOrder {
  id: ID!
  chainId: String
  exchange: String!
  orderHash: String!
  orderType: String!
  makerAddress: String!
  takerAddress: String
  protocol: String!
  protocolData: [String]
}

type TxTransaction {
  id: ID!
  chainId: String
  transactionHash: String!
  blockNumber: String!
  nftContractAddress: String!
  nftContractTokenId: String!
  sender: String!
  receiver: String!
}

type TxOffer {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
}

type TxConsideration {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
  recipient: String
}

type UpdateReadOutput {
  updatedIdsSuccess: [String]!
  idsNotFoundOrFailed: [String]!
}

type TxActivitiesOutput {
  items: [TxActivity]
  pageInfo: PageInfo
  totalItems: Int
}

input TxWalletAddressAndTypeInput {
  pageInput: PageInput
  walletAddress: String!
  activityType: String!
  chainId: String
}

input TxActivitiesInput {
  pageInput: PageInput!
  walletAddress: String
  activityType: ActivityType
  read: Boolean
  tokenId: String
  contract: String
  chainId: String
  skipRelations: Boolean
}



extend type Query {
  getActivities(input: TxActivitiesInput): TxActivitiesOutput!
  getActivitiesByType(activityType: String, chainId: String): [TxActivity]
  "AUTHETICATED"
  getActivitiesByWalletAddress(walletAddress: String, chainId: String): [TxActivity]
  "AUTHETICATED"
  getActivitiesByWalletAddressAndType(input: TxWalletAddressAndTypeInput): [TxActivity]
}

extend type Mutation {
  "AUTHETICATED"
  updateReadByIds(ids: [String]!): UpdateReadOutput!
}
