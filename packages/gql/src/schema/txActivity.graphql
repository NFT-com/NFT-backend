type TxActivity {
  id: ID!
  chainId: String
  activityType: String!
  activityTypeId: String!
  read: Boolean!
  timestamp: String!
  walletId: String!
  order: TxOrder
  cancel: TxCancel
  transaction: TxTransaction
}

type TxCancel {
  id: ID!
  exchange: String!
  foreignType: String!
  foreignKeyId: String!
  transactionHash: String!
}

type TxOrder {
  id: ID!
  chainId: String
  exchange: String!
  orderHash: String!
  orderType: String!
  makerAddress: String!
  takerAddress: String
  protocol: String!
  protocolData: [String]
}

type TxTransaction {
  id: ID!
  chainId: String
  transactionHash: String!
  blockNumber: String!
  nftContractAddress: String!
  nftContractTokenId: String!
  sender: String!
  receiver: String!
}

type TxOffer {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
}

type TxConsideration {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
  recipient: String
}

type UpdateReadOutput {
  updatedIdsSuccess: [String]!
  idsNotFoundOrFailed: [String]!
}

input TxWalletIdAndTypeInput {
  walletId: ID!
  activityType: String!
  chainId: String
}

extend type Query {
  getActivitiesByType(activityType: String, chainId: String): [TxActivity]
  getActivitiesByWalletId(walletId: ID, chainId: String): [TxActivity]
  "AUTHETICATED"
  getActivitiesByWalletIdAndType(input: TxWalletIdAndTypeInput): [TxActivity]
}

extend type Mutation {
  "AUTHETICATED"
  updateReadByIds(ids: [String]!): UpdateReadOutput!
}
