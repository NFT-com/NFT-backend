enum ProfileActionType {
  CreateNFTProfile
  CustomizeProfile
  ReferNetwork
  BuyNFTs
  ListNFTs
  IssueNFTs
}

type User {
  id: ID!
  avatarURL: String
  email: String
  chainId: String
  username: String
  isEmailConfirmed: Boolean!
  myAddresses: [Wallet!]
  myApprovals: [Approval!]
  # myWatchlist: Watchlist # add back in when auth works
  preferences: UserPreferences!
  referredBy: String
  referralId: String!
  profilesActionsWithPoints: [ProfilesActionsOutput]
}

type ProfilesActionsOutput {
  url: String
  action: [ProfileActionType]
  totalPoints: Int
}

type Event {
  id: ID!
  chainId: String!
  contract: String!
  eventName: String!
  txHash: String!
  ownerAddress: String
  profileUrl: String
  destinationAddress: String
  blockNumber: String
  ignore: Boolean
  hideIgnored: Boolean
  hidden: Boolean
}

type UserPreferences {
  bidActivityNotifications: Boolean
  priceChangeNotifications: Boolean
  outbidNotifications: Boolean
  purchaseSuccessNotifications: Boolean
  promotionalNotifications: Boolean
}

type Attributes {
  trait_type: String!
  value: String!
}

type Metadata {
  name: String!
  image: String!,
  description: String!
  attributes: [Attributes]
  animation_url: String
}

type GkOutput {
  tokenId: String!
  metadata: Metadata!
}

type PendingAssociationOutput {
  id: String!
  owner: String!
  url: String!
}

type ApprovedAssociationOutput {
  id: String!
  receiver: String!
  hidden: Boolean!
}

type RejectedAssociationOutput {
  id: String!
  receiver: String!
  hidden: Boolean!
}

input UserPreferencesInput {
  bidActivityNotifications: Boolean
  priceChangeNotifications: Boolean
  outbidNotifications: Boolean
  purchaseSuccessNotifications: Boolean
  promotionalNotifications: Boolean
}

input SignUpInput {
  avatarURL: String
  email: String
  username: String
  referredBy: String
  referredUrl: String
  wallet: WalletInput!
}

input UpdateUserInput {
  email: String
  avatarURL: String
  preferences: UserPreferencesInput
}

input UpdateEmailInput {
  email: String!
}

input UpdateHideIgnoredInput {
  eventIdArray: [String!]
  hideIgnored: Boolean!
}

type UpdateHideIgnoredOutput {
  message: String
}

input UpdateHiddenInput {
  eventIdArray: [String!]
  hidden: Boolean!
}

type UpdateHiddenOutput {
  message: String
}

type RemovedAssociationsForReceiverOutput {
  id: String!
  url: String!
  owner: String!
  hidden: Boolean!
}

type RemovedAssociationsForSenderOutput {
  id: String!
  receiver: String!
  hidden: Boolean!
}

input UpdateCacheInput {
  key: String!
  value: String!
  expireSeconds: Int
}

type UpdateCacheOutput {
  message: String
}

type ClearQueueOutput {
  message: String
}

type ProfileActionOutput {
  profileUrl: String!
  action: ProfileActionType!
  point: Int!
}

input SendReferEmailInput {
  profileUrl: String!
  emails: [String!]!
}

type SendReferEmailOutput {
  message: String
}

extend type Query {
  "AUTHENTICATED"
  me: User!
  "AUTHENTICATED"
  getMyGenesisKeys: [GkOutput]!
  "AUTHENTICATED"
  getMyPendingAssociations: [PendingAssociationOutput]!
  "AUTHENTICATED"
  getApprovedAssociations(profileUrl: String!): [ApprovedAssociationOutput]!
  "AUTHENTICATED"
  getRejectedAssociations(profileUrl: String!): [RejectedAssociationOutput]!
  "AUTHENTICATED"
  getRemovedAssociationsForReceiver: [RemovedAssociationsForReceiverOutput]!
  "AUTHENTICATED"
  getRemovedAssociationsForSender(profileUrl: String!): [RemovedAssociationsForSenderOutput]!
  "AUTHENTICATED"
  getProfileActions: [ProfileActionOutput]!
}

extend type Mutation {
  signUp(input: SignUpInput!): User!
  "AUTHENTICATED"
  updateMe(input: UpdateUserInput!): User!
  updateEmail(input: UpdateEmailInput!): User!
  confirmEmail(token: String!): Boolean!
  "AUTHENTICATED"
  ignoreAssociations(eventIdArray: [String]!): [Event]!
  "AUTHENTICATED"
  updateHideIgnored(input: UpdateHideIgnoredInput!): UpdateHideIgnoredOutput!
  "AUTHENTICATED"
  updateHidden(input: UpdateHiddenInput!): UpdateHiddenOutput!
  "AUTHENTICATED"
  resendEmailConfirm: User!
  "AUTHENTICATED"
  updateCache(input: UpdateCacheInput!): UpdateCacheOutput!
  "AUTHENTICATED"
  clearQueue(queue: String!): ClearQueueOutput!
  "AUTHENTICATED"
  sendReferEmail(input: SendReferEmailInput!): SendReferEmailOutput!
}
