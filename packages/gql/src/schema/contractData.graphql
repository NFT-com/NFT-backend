type NFTDetail {
  response: String,
  nft: NFTPortNFT,
  owner: String,
  contract: NFTPortContract
}

type NFTPortNFT {
  chain: String,
  contract_address: String,
  token_id: String,
  metadata_url: String,
  metadata: NFTPortNFTMetadata,
  file_information: NFTPortNFTFileInfo,
  file_url: String,
  animation_url: String,
  cached_file_url: String,
  cached_animation_url: String,
  mint_date: String,
  updated_date: String
}

type NFTPortNFTMetadata {
  description: String,
  background_color: String,
  external_url: String,
  image: String,
  name: String,
  animation_url: String
}

type NFTPortNFTFileInfo {
  height: Int,
  width: Int,
  file_size: Int
}

type NFTPortContract {
  name: String,
  symbol: String,
  type: String,
  metadata: NFTPortContractMetadata
}

type NFTPortContractMetadata {
  description: String,
  thumbnail_url: String,
  cached_thumbnail_url: String,
  banner_url: String,
  cached_banner_url: String
}

type ContractSalesStatistics {
  response: String,
  statistics: NFTPortStatistics
}

type NFTPortStatistics {
  one_day_volume: Float,
  one_day_change: Float,
  one_day_sales: Int,
  one_day_average_price: Float,
  seven_day_volume: Float,
  seven_day_change: Float,
  seven_day_sales: Int,
  seven_day_average_price: Float,
  thirty_day_volume: Float,
  thirty_day_change: Float,
  thirty_day_sales: Int,
  thirty_day_average_price: Float,
  total_volume: Float,
  total_sales: Int,
  total_supply: Int,
  total_minted: Int,
  num_owners: Int,
  average_price: Float,
  market_cap: Float,
  floor_price: Float,
  floor_price_historic_one_day: Float,
  floor_price_historic_seven_day: Float,
  floor_price_historic_thirty_day: Float,
  updated_date: String
}

type NFTPortTxByContractPriceDetails {
  asset_type: String
  contract_address: String
  price: String
  price_usd: Float
}

type NFTPortTxByContractRoyalties {
  account_address: String
  royalty_share: String
}

type NFTPortTxByContractCreators {
  account_address: String
  creator_share: String
}

type NFTPortTxByContractNft {
  contract_type: String
  contract_address: String
  token_id: String
  metadata_url: String
  total: Int
  signatures: [String]
  royalties: [NFTPortTxByContractRoyalties]
  creators: [NFTPortTxByContractCreators]
}

type NFTPortTxByContractTransactions {
  type: String
  owner_address: String
  contract_address: String
  token_id: String
  quantity: Int
  transaction_hash: String
  block_hash: String
  block_number: Int
  transaction_date: String
  transfer_from: String
  transfer_to: String
  buyer_address: String
  seller_address: String
  marketplace: String
  price_details: NFTPortTxByContractPriceDetails
  nft: NFTPortTxByContractNft
}

type NFTPortTxByContract {
  response: String
  continuation: String
  transactions: [NFTPortTxByContractTransactions]
}

type NFTPortTxByNFTPriceDetails {
  asset_type: String
  price: Float
  price_usd: Float
}

type NFTPortTxByNFTListingDetails {
  asset_type: String
  contract_address: String
  price: String
  price_usd: Float
}

type NFTPortTxByNFTNft {
  contract_type: String
  contract_address: String
  token_id: String
}

type NFTPortTxByNFTTransactions {
  type: String
  lister_address: String
  quantity: Int
  transaction_date: String
  marketplace: String
  owner_address: String
  contract_address: String
  token_id: String
  transaction_hash: String
  block_hash: String
  block_number: Int
  transfer_from: String
  transfer_to: String
  buyer_address: String
  seller_address: String
  price_details: NFTPortTxByNFTPriceDetails
  listing_details: NFTPortTxByNFTListingDetails
  nft: NFTPortTxByNFTNft
}

type NFTPortTxByNFT {
  response: String
  continuation: String
  transactions: [NFTPortTxByNFTTransactions]
}

type TransactionSales {
  transactionHash: String,
  priceUSD: Float,
  date: DateTime,
  transaction: TransactionSalesTx
}

type TransactionSalesTx {
  type: String
  lister_address: String
  quantity: Int
  transaction_date: String
  marketplace: String
  transaction_hash: String
  block_hash: String
  block_number: Int
  buyer_address: String
  seller_address: String
  price_details: NFTPortTxByContractPriceDetails
  nft: NFTPortTxByNFTNft
}


input NFTDetailInput {
  contractAddress: String!
  tokenId: String!
  refreshMetadata: Boolean
}

input ContractSalesStatisticsInput {
  contractAddress: String!
}

input TransactionsByContractInput {
  contractAddress: String!
  chain: String # only ethereum allowed right now
  type: [String] # Value in [transfer, mint, burn, sale, all]
  continuation: String
  pageSize: Int
}

input TransactionsByNFTInput {
  contractAddress: String!
  tokenId: String!
  chain: String # only ethereum allowed right now
  type: [String] # Value in [transfer, mint, burn, sale, all]
  continuation: String
  pageSize: Int
}

input TransactionSalesInput {
  contractAddress: Address!
  dateRange: String
  tokenId: String
}

extend type Query {
  getNFTDetails(input: NFTDetailInput): NFTDetail
  getContractSalesStatistics(input: ContractSalesStatisticsInput): ContractSalesStatistics
  getTxByContract(input: TransactionsByContractInput): NFTPortTxByContract
  getTxByNFT(input: TransactionsByNFTInput): NFTPortTxByNFT
  getSales(input: TransactionSalesInput): [TransactionSales]
}