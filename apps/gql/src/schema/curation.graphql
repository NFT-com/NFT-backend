type CurationItem {
    size: NFTSize
    id: ID!
}

type Curation {
    id: ID!
    items: [CurationItem!]
}

input CurationsInput {
    pageInput: PageInput
    # TODO: allow querying other users' curations or filtering
}

type CurationsOutput {
    items: [Curation!]!
    totalItems: Int
    pageInfo: PageInfo
}

input CurationItemInput {
    size: NFTSize
    id: ID!
}

input CreateCurationInput {
    items: [CurationItemInput!]!
}

input UpdateCurationInput {
    id: ID!
    items: [CurationItemInput!]!
}

input SetCurationInput {
    profileId: ID!
    curationId: ID!
}

input RemoveCurationInput {
    profileId: ID!
}

extend type Query {
    "AUTHENTICATED"
    myCurations(input: CurationsInput!): CurationsOutput
}

extend type Mutation {
    # by Curation owner only
    "AUTHENTICATED - create by curation owner only"
    createCuration(input: CreateCurationInput!): Curation!
    "AUTHENTICATED"
    updateCuration(input: UpdateCurationInput!): Curation!
    # by Curation + profile owner
    "AUTHETICATED - set by curation + profile owner"
    setCuration(input: SetCurationInput!): Profile!
    "AUTHENTICATED"
    removeCuration(input: RemoveCurationInput!): Profile!
}