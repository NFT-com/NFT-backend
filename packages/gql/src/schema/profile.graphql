
type FollowersOutput {
  items: [Wallet!]!
  pageInfo: PageInfo
  totalItems: Int
}

input FollowersInput {
  profileId: ID!
  pageInput: PageInput
}

enum ProfileStatus {
  Available
  Pending
  Owned
}

type Profile {
  id: ID!
  bannerURL: String
  createdAt: DateTime!
  description: String
  followersCount: Int
  isFollowedByMe: Boolean
  isOwnedByMe: Boolean
  owner: Wallet
  tokenId: String
  photoURL: String
  status: ProfileStatus
  url: String!
  winningBid: Bid
  showGallery: Boolean
}

input ProfilesInput {
  pageInput: PageInput
  statuses: [ProfileStatus]
}

type ProfilesOutput {
  items: [Profile!]!
  pageInfo: PageInfo
  totalItems: Int
}

input UpdateProfileInput {
  id: ID!
  bannerURL: String
  description: String
  photoURL: String
  showGallery: Boolean
}

input ProfileClaimedInput {
  profileId: ID!
  walletId: ID!
  txHash: String!
}

input MintGKProfileInput {
  startIndex: Int
  count: Int
}

input InsiderReservedProfilesInput {
  address: Address!
}

input UploadProfileImagesInput {
  profileId: ID!
  banner: Upload
  avatar: Upload
  description: String
  compositeProfileURL: Boolean!
}

input CreateCompositeImageInput {
  profileId: ID!
}

input LatestProfilesInput {
  pageInput: PageInput
}

input CreateAllCompositeImagesInput {
  pageInput: PageInput
}

extend type Query {
  profileFollowers(input: FollowersInput!): FollowersOutput!
  profilesFollowedByMe(input: ProfilesInput): ProfilesOutput!
  myProfiles(input: ProfilesInput): ProfilesOutput!
  profile(url: String!): Profile!
  profilePassive(url: String!): Profile!
  blockedProfileURI(url: String!, blockReserved: Boolean!): Boolean!
  insiderReservedProfiles(input: InsiderReservedProfilesInput!): [String!]!
  latestProfiles(input: LatestProfilesInput): ProfilesOutput!
}

extend type Mutation {
  followProfile(url: String): Profile!
  unfollowProfile(id: ID!): Profile!
  updateProfile(input: UpdateProfileInput!): Profile!
  profileClaimed(input: ProfileClaimedInput!): Profile!
  mintGKProfile(input: MintGKProfileInput): String!
  uploadProfileImages(input: UploadProfileImagesInput): Profile!
  createCompositeImage(input: CreateCompositeImageInput): Profile!
  createAllCompositeImages(input: CreateAllCompositeImagesInput): ProfilesOutput!
}
