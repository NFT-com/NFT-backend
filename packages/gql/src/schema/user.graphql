type User {
  id: ID!
  avatarURL: String
  email: String
  username: String
  isEmailConfirmed: Boolean!
  myAddresses: [Wallet!]
  myApprovals: [Approval!]
  # myWatchlist: Watchlist # add back in when auth works
  preferences: UserPreferences!
  referredBy: String
  referralId: String!
}

type UserPreferences {
  bidActivityNotifications: Boolean
  priceChangeNotifications: Boolean
  outbidNotifications: Boolean
  purchaseSuccessNotifications: Boolean
  promotionalNotifications: Boolean
}

type Attributes {
  trait_type: String!
  value: String!
}

type Metadata {
  name: String!
  image: String!,
  description: String!
  attributes: [Attributes]
  animation_url: String
}

type GkOutput {
  tokenId: String!
  metadata: Metadata!
}

input UserPreferencesInput {
  bidActivityNotifications: Boolean
  priceChangeNotifications: Boolean
  outbidNotifications: Boolean
  purchaseSuccessNotifications: Boolean
  promotionalNotifications: Boolean
}

input SignUpInput {
  avatarURL: String
  email: String
  username: String
  referredBy: String
  wallet: WalletInput!
}

input UpdateUserInput {
  email: String
  avatarURL: String
  preferences: UserPreferencesInput
}

input UpdateEmailInput {
  email: String!
}

extend type Query {
  me: User!
  getMyGenesisKeys: [GkOutput]!
}

extend type Mutation {
  signUp(input: SignUpInput!): User!
  updateMe(input: UpdateUserInput!): User!
  updateEmail(input: UpdateEmailInput!): User!
  confirmEmail(token: String!): Boolean!
  resendEmailConfirm: User!
}
