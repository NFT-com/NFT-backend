type User {
  id: ID!
  avatarURL: String
  email: String
  username: String
  isEmailConfirmed: Boolean!
  myAddresses: [Wallet!]
  myApprovals: [Approval!]
  preferences: UserPreferences!
  referredBy: String
  referralId: String!
}

type UserPreferences {
  bidActivityNotifications: Boolean
  priceChangeNotifications: Boolean
  outbidNotifications: Boolean
  purchaseSuccessNotifications: Boolean
  promotionalNotifications: Boolean
  nftSoldNotifications: Boolean
  nftListingChangeNotifications: Boolean
  nftOwnerChangeNotifications: Boolean
  nftNewBidNotifications: Boolean
  collectionFloorChangeNotifications: Boolean
  collectionAssetSoldNotifications: Boolean
  collectionNewListingNotifications: Boolean
}

input UserPreferencesInput {
  bidActivityNotifications: Boolean
  priceChangeNotifications: Boolean
  outbidNotifications: Boolean
  purchaseSuccessNotifications: Boolean
  promotionalNotifications: Boolean
  nftSoldNotifications: Boolean
  nftListingChangeNotifications: Boolean
  nftOwnerChangeNotifications: Boolean
  nftNewBidNotifications: Boolean
  collectionFloorChangeNotifications: Boolean
  collectionAssetSoldNotifications: Boolean
  collectionNewListingNotifications: Boolean
}

input SignUpInput {
  avatarURL: String
  email: String
  username: String
  referredBy: String
  wallet: WalletInput!
}

input UpdateUserInput {
  email: String
  avatarURL: String
  preferences: UserPreferencesInput
}

input UpdateEmailInput {
  email: String!
}

extend type Query {
  me: User!
}

extend type Mutation {
  signUp(input: SignUpInput!): User!
  updateMe(input: UpdateUserInput!): User!
  updateEmail(input: UpdateEmailInput!): User!
  confirmEmail(token: String!): Boolean!
  resendEmailConfirm: User!
}
