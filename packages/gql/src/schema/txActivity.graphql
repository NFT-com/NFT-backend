
enum ProtocolType {
  Seaport
  LooksRare
  X2Y2
  NFTCOM
}

enum ActivityType {
  Listing
  Bid
  Cancel
  Sale
  Transfer
  Swap
  Purchase
}

enum ActivityStatus {
  Valid
  Cancelled
  Executed
}

enum ActivityExpiration {
  Expired
  Active
  Both
}

type SeaportOffer {
  itemType: Int
  token: String
  identifierOrCriteria: String
  startAmount: String
  endAmount: String
}

type SeaportConsideration {
  itemType: Int
  token: String
  identifierOrCriteria: String
  startAmount: String
  endAmount: String
  recipient: String
}

type SeaportProtocolDataParams {
  offerer: String
  offer: [SeaportOffer]
  consideration: [SeaportConsideration]
  startTime: String
  endTime: String
  orderType: Int
  zone: String
  zoneHash: String
  salt: String
  conduitKey: String
  totalOriginalConsiderationItems: Int
  counter: Int
}

type SeaportProtocolData {
  parameters: SeaportProtocolDataParams
  signature: String
}

type LooksrareProtocolData {
  isOrderAsk: Boolean
  signer: String
  collectionAddress: String
  price: String
  tokenId: String
  amount: String
  strategy: String
  currencyAddress: String
  nonce: String
  startTime: String
  endTime: String
  minPercentageToAsk: String
  params: String
  v: String
  r: String
  s: String
}

type X2Y2ProtocolData {
  side: Int
  type: String
  erc_type: Int
  status: String
  maker: String
  contract: String
  price: String
  amount: Int
  tokenId: String
  currencyAddress: String
  id: Int
  created_at: Int
  updated_at: Int
  end_at: Int
  royalty_fee: Int
  is_collection_offer: Boolean
  is_bundle: Boolean
  is_private: Boolean
}

type NFTCOMProtocolData {
  makeAsset: [MarketplaceAsset]
  takeAsset: [MarketplaceAsset]
  swapTransactionId: String
  acceptedAt: Int
  rejectedAt: Int
  listingId: String
  buyNowTaker: String
  auctionType: AuctionType
  signature: Signature
  salt: Int
  start: Int
  end: Int
}

union ProtocolData = SeaportProtocolData | LooksrareProtocolData | X2Y2ProtocolData | NFTCOMProtocolData

type TxSeaportProtocolData {
  offer: [SeaportOffer]
  consideration: [SeaportConsideration]
}

type TxLooksrareProtocolData {
  isOrderAsk: Boolean
  signer: String
  collectionAddress: String
  price: String
  tokenId: String
  amount: String
  strategy: String
  currencyAddress: String
  nonce: String
  startTime: String
  endTime: String
  minPercentageToAsk: String
  params: String
  v: String
  r: String
  s: String
}

type TxX2Y2OrderItem {
  price: [String]
  data: String
}

type TxX2Y2Fee {
  percentage: String
  to: String
}

type TxX2Y2SettleDetail {
  op: [String]
  orderIdx: [String]
  itemIdx: [String]
  price: [String]
  itemHash: String
  executionDelegate: String
  dataReplacement: String
  bidIncentivePct: [String]
  aucMinIncrementPct: [String]
  aucIncDurationSecs: [String]
  fees: [TxX2Y2Fee]
}

type TxX2Y2ProtocolData {
  currency: String
  amount: String
  orderSalt: String
  settleSalt: String
  intent: String
  delegateType: String
  deadline: String
  data: String
}

type TxNFTCOMProtocolData {
  makeAsset: [MarketplaceAsset]
  takeAsset: [MarketplaceAsset]
  swapTransactionId: String
  acceptedAt: Int
  rejectedAt: Int
  listingId: String
  buyNowTaker: String
  auctionType: AuctionType
  signature: Signature
  salt: Int
  start: Int
  end: Int
  private: Boolean
  listingOrderId: String
  bidOrderId: String
}



union TxProtocolData = TxSeaportProtocolData | TxLooksrareProtocolData | TxX2Y2ProtocolData | TxNFTCOMProtocolData

type TxActivity {
  id: ID!
  chainId: String
  activityType: ActivityType!
  activityTypeId: String!
  read: Boolean!
  timestamp: DateTime!
  status: ActivityStatus!
  nftContract: String!
  nftId: [String]!
  walletAddress: String!
  order: TxOrder
  transaction: TxTransaction
  cancel: TxCancel
  index: Int
}

type TxCancel {
  id: ID!
  exchange: String!
  foreignType: String!
  foreignKeyId: String!
  transactionHash: String!
  blockNumber: String!
}

type TxOrder {
  id: ID!
  chainId: String
  exchange: String!
  orderHash: String!
  orderType: String!
  makerAddress: String!
  takerAddress: String
  protocol: String!
  protocolData: ProtocolData
  memo: String
  nonce: Int
  osNonce: String
}

type TxTransaction {
  id: ID!
  chainId: String
  transactionHash: String!
  blockNumber: String!
  nftContractAddress: String!
  nftContractTokenId: String!
  maker: String!
  taker: String!
  exchange: String!
  protocol: String!
  protocolData: TxProtocolData
}

type TxOffer {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
}

type TxConsideration {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
  recipient: String
}

type UpdateReadOutput {
  updatedIdsSuccess: [String]!
  idsNotFoundOrFailed: [String]!
}

type TxActivitiesOutput {
  items: [TxActivity]
  pageInfo: PageInfo
  totalItems: Int
}

input TxWalletAddressAndTypeInput {
  pageInput: PageInput
  walletAddress: String!
  activityType: String!
  chainId: String
}

input TxActivitiesInput {
  pageInput: PageInput!
  walletAddress: String
  activityType: ActivityType
  status: ActivityStatus
  read: Boolean
  tokenId: String
  contract: String
  chainId: String
  skipRelations: Boolean
  expirationType: ActivityExpiration
}

input GetSeaportSignaturesInput {
  orderHashes: [String!]!
}

type FulfillActivitiesNFTIdOutput {
  message: String
}

extend type Query {
  getActivities(input: TxActivitiesInput): TxActivitiesOutput!
  getSeaportSignatures(input: GetSeaportSignaturesInput): [TxOrder]
  "AUTHENTICATED"
  getActivitiesByType(activityType: String, chainId: String): [TxActivity]
  "AUTHENTICATED"
  getActivitiesByWalletAddress(walletAddress: String, chainId: String): [TxActivity]
  "AUTHENTICATED"
  getActivitiesByWalletAddressAndType(input: TxWalletAddressAndTypeInput): [TxActivity]
}

extend type Mutation {
  "AUTHENTICATED"
  updateReadByIds(ids: [String]!): UpdateReadOutput!
  "AUTHENTICATED"
  updateStatusByIds(ids: [String]!, status: ActivityStatus): UpdateReadOutput!
  "AUTHENTICATED"
  fulfillActivitiesNFTId(count: Int!): FulfillActivitiesNFTIdOutput!
}
