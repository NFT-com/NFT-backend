/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AddressTupleStruct = { cid: BigNumberish; chainAddr: string };

export type AddressTupleStructOutput = [number, string] & {
  cid: number;
  chainAddr: string;
};

export type RelatedProfilesStruct = { addr: string; profileUrl: string };

export type RelatedProfilesStructOutput = [string, string] & {
  addr: string;
  profileUrl: string;
};

export interface NftResolverInterface extends utils.Interface {
  contractName: "NftResolver";
  functions: {
    "addAssociatedAddresses((uint8,string)[],string)": FunctionFragment;
    "associateSelfWithUsers(string[])": FunctionFragment;
    "associatedAddresses(string)": FunctionFragment;
    "associatedContract(string)": FunctionFragment;
    "clearAssociatedAddresses(string)": FunctionFragment;
    "clearAssociatedContract(string)": FunctionFragment;
    "evmBased(uint8)": FunctionFragment;
    "getAllAssociatedAddr(address,string)": FunctionFragment;
    "getApprovedEvm(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "parseAddr(string)": FunctionFragment;
    "removeAssociatedAddress((uint8,string),string)": FunctionFragment;
    "removeAssociatedProfile(string)": FunctionFragment;
    "setAssociatedContract((uint8,string),string)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRegex(uint8,address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAssociatedAddresses",
    values: [AddressTupleStruct[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "associateSelfWithUsers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "associatedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "associatedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAssociatedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAssociatedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "evmBased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAssociatedAddr",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedEvm",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "parseAddr", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAssociatedAddress",
    values: [AddressTupleStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssociatedProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssociatedContract",
    values: [AddressTupleStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRegex",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAssociatedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associateSelfWithUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associatedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "associatedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAssociatedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAssociatedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evmBased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAssociatedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedEvm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssociatedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssociatedProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssociatedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AssociateEvmUser(address,string,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CancelledEvmAssociation(address,string,address)": EventFragment;
    "ClearAllAssociatedAddresses(address,string)": EventFragment;
    "UpdatedRegex(uint8,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssociateEvmUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelledEvmAssociation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClearAllAssociatedAddresses"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRegex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AssociateEvmUserEvent = TypedEvent<
  [string, string, string],
  { owner: string; profileUrl: string; associatedAddress: string }
>;

export type AssociateEvmUserEventFilter =
  TypedEventFilter<AssociateEvmUserEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CancelledEvmAssociationEvent = TypedEvent<
  [string, string, string],
  { owner: string; profileUrl: string; associatedAddresses: string }
>;

export type CancelledEvmAssociationEventFilter =
  TypedEventFilter<CancelledEvmAssociationEvent>;

export type ClearAllAssociatedAddressesEvent = TypedEvent<
  [string, string],
  { owner: string; profileUrl: string }
>;

export type ClearAllAssociatedAddressesEventFilter =
  TypedEventFilter<ClearAllAssociatedAddressesEvent>;

export type UpdatedRegexEvent = TypedEvent<
  [number, string],
  { _cid: number; _regexAddress: string }
>;

export type UpdatedRegexEventFilter = TypedEventFilter<UpdatedRegexEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface NftResolver extends BaseContract {
  contractName: "NftResolver";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAssociatedAddresses(
      inputTuples: AddressTupleStruct[],
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    associateSelfWithUsers(
      urls: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    associatedAddresses(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<[AddressTupleStructOutput[]]>;

    associatedContract(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<[AddressTupleStructOutput]>;

    clearAssociatedAddresses(
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearAssociatedContract(
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    evmBased(cid: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    getAllAssociatedAddr(
      _user: string,
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<[AddressTupleStructOutput[]]>;

    getApprovedEvm(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[RelatedProfilesStructOutput[]]>;

    initialize(
      _nftProfile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseAddr(_a: string, overrides?: CallOverrides): Promise<[string]>;

    removeAssociatedAddress(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAssociatedProfile(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssociatedContract(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegex(
      _cid: BigNumberish,
      _regexContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAssociatedAddresses(
    inputTuples: AddressTupleStruct[],
    profileUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  associateSelfWithUsers(
    urls: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  associatedAddresses(
    profileUrl: string,
    overrides?: CallOverrides
  ): Promise<AddressTupleStructOutput[]>;

  associatedContract(
    profileUrl: string,
    overrides?: CallOverrides
  ): Promise<AddressTupleStructOutput>;

  clearAssociatedAddresses(
    profileUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearAssociatedContract(
    profileUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  evmBased(cid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getAllAssociatedAddr(
    _user: string,
    profileUrl: string,
    overrides?: CallOverrides
  ): Promise<AddressTupleStructOutput[]>;

  getApprovedEvm(
    _user: string,
    overrides?: CallOverrides
  ): Promise<RelatedProfilesStructOutput[]>;

  initialize(
    _nftProfile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseAddr(_a: string, overrides?: CallOverrides): Promise<string>;

  removeAssociatedAddress(
    inputTuple: AddressTupleStruct,
    profileUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAssociatedProfile(
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssociatedContract(
    inputTuple: AddressTupleStruct,
    profileUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _new: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegex(
    _cid: BigNumberish,
    _regexContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAssociatedAddresses(
      inputTuples: AddressTupleStruct[],
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    associateSelfWithUsers(
      urls: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    associatedAddresses(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<AddressTupleStructOutput[]>;

    associatedContract(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<AddressTupleStructOutput>;

    clearAssociatedAddresses(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    clearAssociatedContract(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    evmBased(cid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getAllAssociatedAddr(
      _user: string,
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<AddressTupleStructOutput[]>;

    getApprovedEvm(
      _user: string,
      overrides?: CallOverrides
    ): Promise<RelatedProfilesStructOutput[]>;

    initialize(_nftProfile: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseAddr(_a: string, overrides?: CallOverrides): Promise<string>;

    removeAssociatedAddress(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAssociatedProfile(
      url: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAssociatedContract(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_new: string, overrides?: CallOverrides): Promise<void>;

    setRegex(
      _cid: BigNumberish,
      _regexContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AssociateEvmUser(address,string,address)"(
      owner?: string | null,
      profileUrl?: null,
      associatedAddress?: string | null
    ): AssociateEvmUserEventFilter;
    AssociateEvmUser(
      owner?: string | null,
      profileUrl?: null,
      associatedAddress?: string | null
    ): AssociateEvmUserEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CancelledEvmAssociation(address,string,address)"(
      owner?: string | null,
      profileUrl?: null,
      associatedAddresses?: string | null
    ): CancelledEvmAssociationEventFilter;
    CancelledEvmAssociation(
      owner?: string | null,
      profileUrl?: null,
      associatedAddresses?: string | null
    ): CancelledEvmAssociationEventFilter;

    "ClearAllAssociatedAddresses(address,string)"(
      owner?: string | null,
      profileUrl?: null
    ): ClearAllAssociatedAddressesEventFilter;
    ClearAllAssociatedAddresses(
      owner?: string | null,
      profileUrl?: null
    ): ClearAllAssociatedAddressesEventFilter;

    "UpdatedRegex(uint8,address)"(
      _cid?: null,
      _regexAddress?: null
    ): UpdatedRegexEventFilter;
    UpdatedRegex(_cid?: null, _regexAddress?: null): UpdatedRegexEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addAssociatedAddresses(
      inputTuples: AddressTupleStruct[],
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    associateSelfWithUsers(
      urls: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    associatedAddresses(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    associatedContract(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearAssociatedAddresses(
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearAssociatedContract(
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    evmBased(cid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getAllAssociatedAddr(
      _user: string,
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedEvm(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _nftProfile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseAddr(_a: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeAssociatedAddress(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAssociatedProfile(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssociatedContract(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegex(
      _cid: BigNumberish,
      _regexContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssociatedAddresses(
      inputTuples: AddressTupleStruct[],
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    associateSelfWithUsers(
      urls: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    associatedAddresses(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    associatedContract(
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearAssociatedAddresses(
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearAssociatedContract(
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    evmBased(
      cid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAssociatedAddr(
      _user: string,
      profileUrl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedEvm(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _nftProfile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseAddr(
      _a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAssociatedAddress(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAssociatedProfile(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssociatedContract(
      inputTuple: AddressTupleStruct,
      profileUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegex(
      _cid: BigNumberish,
      _regexContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
