name: Deploy MintRunner Cronjob 
description: Deploys the infrastrcuture and apps to an environment
inputs:
  stage:
    description: Environment to deploy on
    required: true
    default: dev
  secrets:
    description: Secrets
    required: true
runs:
  using: composite
  steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 16.x
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ fromJSON(inputs.secrets).AWS_ACCESS_KEY_ID }}
        aws-region: ${{ fromJSON(inputs.secrets).AWS_REGION }}
        aws-secret-access-key: ${{ fromJSON(inputs.secrets).AWS_SECRET_ACCESS_KEY }}
    - name: Login to AWS ECR
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Install pulumi
      uses: pulumi/setup-pulumi@v2
    - name: Login to Pulumi backend
      shell: bash
      run: pulumi login s3://nftcom-pulumi-state
    - name: Install Infra Deps
      working-directory: infra
      shell: bash
      run: npm install
    - name: Build and Push MintRunner Images
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        ECR_REPOSITORY: mintrunner  #for simplicity, ecr repo created outside pulumi stack
      run: |
        export DOCKER_BUILDKIT=1
        docker build . -f cronjobs/mintrunner/mint.Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-latest -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-${{ github.sha }}
    - name: Build and Push DBSync Images
      if: ${{ inputs.stage == 'prod' }}  # only deploy this cron to prod
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        ECR_REPOSITORY: dbsync  #for simplicity, ecr repo created outside pulumi stack
      run: |
        export DOCKER_BUILDKIT=1
        docker build . -f cronjobs/dbsync/Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
    - name: Build and Push SalesProcessor Images
      if: ${{ inputs.stage  != 'dev' }}
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        ECR_REPOSITORY: sales-processor  #for simplicity, ecr repo created outside pulumi stack
      run: |
        export DOCKER_BUILDKIT=1
        docker build . -f cronjobs/sales-processor/Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-latest -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-${{ github.sha }}
    - name: Build and Push CollectionStats Images
      if: ${{ inputs.stage  != 'dev' }}
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        ECR_REPOSITORY: collection-stats  #for simplicity, ecr repo created outside pulumi stack
      run: |
        export DOCKER_BUILDKIT=1
        docker build . -f cronjobs/collection-stats/Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-latest -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.stage }}-${{ github.sha }}
    - run: npm i
    - name: Build and Package Monitor Hidden NFTs Lambda
      run: npx -y nx package monitors-hidden-nfts
    - name: Deploy Cronjob Infra
      shell: bash
      working-directory: infra
      env:
        STAGE: ${{ inputs.stage }}
        PULUMI_CONFIG_PASSPHRASE: ""
        AWS_ACCOUNT_ID: ${{ fromJSON(inputs.secrets).AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ fromJSON(inputs.secrets).AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ fromJSON(inputs.secrets).AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ fromJSON(inputs.secrets).AWS_REGION }}
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        GIT_SHA: ${{ github.sha }}
        ENV: ${{ fromJSON(inputs.secrets).ENV }}
        ANALYTICS_DB_HOST: ${{ fromJSON(inputs.secrets).ANALYTICS_DB_HOST }}
        ANALYTICS_DB_PORT: ${{ fromJSON(inputs.secrets).ANALYTICS_DB_PORT }}
        ANALYTICS_DB_NAME: ${{ fromJSON(inputs.secrets).ANALYTICS_DB_NAME }}
        ANALYTICS_DB_USER: ${{ fromJSON(inputs.secrets).ANALYTICS_DB_USER }}
        ANALYTICS_DB_PASS: ${{ fromJSON(inputs.secrets).ANALYTICS_DB_PASS }}
        ETH_NODE_URL: ${{ fromJSON(inputs.secrets).ETH_NODE_URL }}
        PROFILE_PER_GK: ${{ fromJSON(inputs.secrets).PROFILE_PER_GK }}
        MINT_TABLE_NAME: ${{ fromJSON(inputs.secrets).MINT_TABLE_NAME }}
        GQL_DB_HOST: ${{ fromJSON(inputs.secrets).GQL_DB_HOST }}
        GQL_DB_PORT: ${{ fromJSON(inputs.secrets).GQL_DB_PORT }}
        GQL_DB_PASSWORD: ${{ fromJSON(inputs.secrets).GQL_DB_PASSWORD }}
        GQL_DB_USE_SSL: ${{ fromJSON(inputs.secrets).GQL_DB_USE_SSL }}
        STG_GQL_DB_HOST: ${{ fromJSON(inputs.secrets).STG_GQL_DB_HOST }} 
        STG_GQL_DB_PASSWORD: ${{ fromJSON(inputs.secrets).STG_GQL_DB_PASSWORD }}
        PROD_DB_BASTION_CONN: ${{ fromJSON(inputs.secrets).PROD_DB_BASTION_CONN }}
        PROD_DB_SSH_KEY:  ${{ fromJSON(inputs.secrets).PROD_DB_SSH_KEY }}
        REDIS_HOST: ${{ fromJSON(inputs.secrets).REDIS_HOST }}
        REDIS_PORT: ${{ fromJSON(inputs.secrets).REDIS_PORT }}
        NODE_ENV: ${{ fromJSON(inputs.secrets).NODE_ENV }}
        NFTPORT_KEY: ${{ fromJSON(inputs.secrets).NFTPORT_KEY }}
        ALCHEMY_API_URL: ${{ fromJSON(inputs.secrets).ALCHEMY_API_URL }}
      run: npm run deploy:cronjobs
