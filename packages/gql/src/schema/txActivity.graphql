
enum ActivityType {
  Listing 
  Bid
  Cancel
  Sale
  Transfer
}

enum ActivityStatus {
  Valid
  Cancelled
  Executed
}

type SeaportOffer {
  itemType: Int
  token: String
  identifierOrCriteria: String
  startAmount: String
  endAmount: String
}

type SeaportConsideration {
  itemType: Int
  token: String
  identifierOrCriteria: String
  startAmount: String
  endAmount: String
  recipient: String
}

type SeaportProtocolDataParams {
  offerer: String
  offer: [SeaportOffer]
  consideration: [SeaportConsideration]
  startTime: String
  endTime: String
  orderType: Int
  zone: String
  zoneHash: String
  salt: String
  conduitKey: String
  totalOriginalConsiderationItems: Int
  counter: Int
}

type SeaportProtocolData {
  parameters: SeaportProtocolDataParams
  signature: String
}

type LooksrareProtocolData {
  isOrderAsk: Boolean
  signer: String
  collectionAddress: String
  price: String
  tokenId: String
  amount: String
  strategy: String
  currencyAddress: String
  nonce: String
  startTime: String
  endTime: String
  minPercentageToAsk: String
  params: String
  v: String
  r: String
  s: String
}

union ProtocolData = SeaportProtocolData | LooksrareProtocolData 

type TxActivity {
  id: ID!
  chainId: String
  activityType: ActivityType!
  activityTypeId: String!
  read: Boolean!
  timestamp: DateTime!
  status: ActivityStatus!
  nftContract: String!
  nftId: [String]!
  walletAddress: String!
  order: TxOrder
  transaction: TxTransaction
  cancel: TxCancel
  readTimestamp: DateTime!
}

type TxCancel {
  id: ID!
  exchange: String!
  foreignType: String!
  foreignKeyId: String!
  transactionHash: String!
  blockNumber: String!
}

type TxOrder {
  id: ID!
  chainId: String
  exchange: String!
  orderHash: String!
  orderType: String!
  makerAddress: String!
  takerAddress: String
  protocol: String!
  protocolData: ProtocolData
}

type TxTransaction {
  id: ID!
  chainId: String
  transactionHash: String!
  blockNumber: String!
  nftContractAddress: String!
  nftContractTokenId: String!
  maker: String!
  taker: String!
  protocol: String!
  exchange: String!
}

type TxOffer {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
}

type TxConsideration {
  chainId: String
  token: String!
  startAmount: String!
  endAmount: String
  recipient: String
}

type UpdateReadOutput {
  updatedIdsSuccess: [String]!
  idsNotFoundOrFailed: [String]!
}

type TxActivitiesOutput {
  items: [TxActivity]
  pageInfo: PageInfo
  totalItems: Int
}

input TxWalletAddressAndTypeInput {
  pageInput: PageInput
  walletAddress: String!
  activityType: String!
  chainId: String
}

input TxActivitiesInput {
  pageInput: PageInput!
  walletAddress: String
  activityType: ActivityType
  status: ActivityStatus
  read: Boolean
  tokenId: String
  contract: String
  chainId: String
  skipRelations: Boolean
  ignoreExpired: Boolean
}

extend type Query {
  getActivities(input: TxActivitiesInput): TxActivitiesOutput!
  getActivitiesByType(activityType: String, chainId: String): [TxActivity]
  "AUTHETICATED"
  getActivitiesByWalletAddress(walletAddress: String, chainId: String): [TxActivity]
  "AUTHETICATED"
  getActivitiesByWalletAddressAndType(input: TxWalletAddressAndTypeInput): [TxActivity]
}

extend type Mutation {
  "AUTHETICATED"
  updateReadByIds(ids: [String]!): UpdateReadOutput!
  "AUTHETICATED"
  updateStatusByIds(ids: [String]!, status: ActivityStatus): UpdateReadOutput!
}
