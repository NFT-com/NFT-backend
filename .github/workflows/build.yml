name: build
on:
  push:
    branches: 
      - main
  pull_request:
jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15
      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
  display-semver:
    runs-on: ubuntu-latest
    needs: calculate-version
    env:
      SEMVER: ${{ needs.calculate-version.outputs.semVer }}
    steps:
      - name: Display version
        run: |
          echo SemVer: $SEMVER
  branch-info:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6
      - name: Get base branch name
        id: get-base-branch-name
        run: |
            if [[ "${{github.event.pull_request.base.ref}}" != "" ]]; then
              echo "branch=${{github.event.pull_request.base.ref}}" >> $GITHUB_OUTPUT
            else
              echo "branch=main" >> $GITHUB_OUTPUT
            fi
    outputs:
      base-branch-name: ${{ steps.get-base-branch-name.outputs.branch }}
      branch-name: ${{ steps.branch-name.outputs.current_branch }}
  get-affected:
    needs: [branch-info]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: ${{needs.branch-info.outputs.base-branch-name}}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: Get affected
        id: get-projects-arrays
        # When not in a PR and the current branch is main, pass --all flag. Otherwise pass the base branch
        run: |
            if [[ "${{github.event.pull_request.base.ref}}" == "" && "${{needs.branch-info.outputs.branch-name}}" == "main" ]]; then
              echo "test-unit=$(node scripts/print-affected-array.js test --all)" >> $GITHUB_OUTPUT
              echo "test-int=$(node scripts/print-affected-array.js test:int --all)" >> $GITHUB_OUTPUT
            else
              echo "test-unit=$(node scripts/print-affected-array.js test origin/${{needs.branch-info.outputs.base-branch-name}})" >> $GITHUB_OUTPUT
              echo "test-int=$(node scripts/print-affected-array.js test:int origin/${{needs.branch-info.outputs.base-branch-name}})" >> $GITHUB_OUTPUT
            fi
    outputs:
      test-unit: ${{ steps.get-projects-arrays.outputs.test-unit }}
      test-int: ${{ steps.get-projects-arrays.outputs.test-int }}
  test-unit:
    runs-on: ubuntu-latest
    environment: nftcom_dev
    needs: [get-affected]
    # Skip the job if there are not affected projects containing unit tests
    if:  ${{ fromJson(needs.get-affected.outputs.test-unit)[0] }}
    strategy:
      max-parallel: 4
      # One job for each different project and node version
      matrix:
        node: ["16.x"]
        projectName: ${{fromJson(needs.get-affected.outputs.test-unit)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_HOST: 'localhost'
          envkey_DB_PORT: 5432
          envkey_AUTH_MESSAGE: ${{ secrets.AUTH_MESSAGE }}
          envkey_SG_API_KEY: ${{ secrets.SG_API_KEY }}
          envkey_CONFIRM_EMAIL_URL: ${{ secrets.CONFIRM_EMAIL_URL }}
          envkey_ASSET_BUCKET: ${{ secrets.ASSET_BUCKET }}
          envkey_ASSET_BUCKET_ROLE: ${{ secrets.ASSET_BUCKET_ROLE }}
          envkey_ETH_GAS_STATION_API_KEY: ${{ secrets.ETH_GAS_STATION_API_KEY }}
          envkey_TEAM_AUTH_TOKEN: ${{ secrets.TEAM_AUTH_TOKEN }}
          envkey_MNEMONIC: ${{ secrets.MNEMONIC }}
          envkey_MNEMONIC_RINKEBY: ${{ secrets.MNEMONIC_RINKEBY }}
          envkey_HCS_TOPIC_ID: ${{ secrets.HCS_TOPIC_ID }}
          envkey_HCS_ENABLED: ${{ secrets.HCS_ENABLED }}
          envkey_HCS_ACCOUNT_ID: ${{ secrets.HCS_ACCOUNT_ID }}
          envkey_HCS_PRIVATE_KEY: ${{ secrets.HCS_PRIVATE_KEY }}
          envkey_ZMOK_API_URL: ${{ secrets.ZMOK_API_URL }}
          envkey_INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          envkey_CHAIN_ID: ${{ secrets.CHAIN_ID }}
          envkey_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          envkey_ACTIVITY_ENDPOINTS_ENABLED: ${{ secrets.ACTIVITY_ENDPOINTS_ENABLED }}
          envkey_ALCHEMY_API_URL: ${{ secrets.ALCHEMY_API_URL }}
          envkey_ALCHEMY_API_URL_RINKEBY: ${{ secrets.ALCHEMY_API_URL_RINKEBY }}
          envkey_ALCHEMY_API_URL_GOERLI: ${{ secrets.ALCHEMY_API_URL_GOERLI }}
          envkey_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          envkey_PUBLIC_SALE_KEY: ${{ secrets.PUBLIC_SALE_KEY }}
          envkey_SERVER_CONFIG: ${{ secrets.SERVER_CONFIG }}
          envkey_SHARED_MINT_SECRET: ${{ secrets.SHARED_MINT_SECRET }}
          envkey_SUPPORTED_NETWORKS: ${{ secrets.SUPPORTED_NETWORKS }}
          envkey_TYPESENSE_HOST: ${{ secrets.TYPESENSE_HOST }}
          envkey_TYPESENSE_API_KEY: ${{ secrets.TYPESENSE_API_KEY }}
          envkey_MINTED_PROFILE_EVENTS_MAX_BLOCKS: ${{ secrets.MINTED_PROFILE_EVENTS_MAX_BLOCKS }}
          envkey_PROFILE_NFTS_EXPIRE_DURATION: ${{ secrets.PROFILE_NFTS_EXPIRE_DURATION }}
          envkey_BULL_MAX_REPEAT_COUNT: ${{ secrets.BULL_MAX_REPEAT_COUNT }}
          envkey_OPENSEA_API_KEY: ${{ secrets.OPENSEA_API_KEY }}
          envkey_LOOKSRARE_API_KEY: ${{ secrets.LOOKSRARE_API_KEY }}
          envkey_NFTPORT_KEY: ${{ secrets.NFTPORT_KEY }}
          envkey_PROFILE_SCORE_EXPIRE_DURATION: ${{ secrets.PROFILE_SCORE_EXPIRE_DURATION }}
          envkey_NFT_EXTERNAL_ORDER_REFRESH_DURATION: ${{ secrets.NFT_EXTERNAL_ORDER_REFRESH_DURATION }}
          envkey_TEST_DB_HOST: 'localhost'
          envkey_TEST_DB_DATABASE: ${{ secrets.TEST_DB_DATABASE }}
          envkey_TEST_DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
          envkey_TEST_DB_PORT: 5432
          envkey_TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          envkey_TEST_DB_USE_SSL: ${{ secrets.TEST_DB_USE_SSL }}
          envkey_REFRESH_NFT_DURATION: ${{ secrets.REFRESH_NFT_DURATION }}
          envkey_IPFS_WEB_GATEWAY: ${{ secrets.IPFS_WEB_GATEWAY }}
          envkey_DEFAULT_TTL_MINS: ${{ secrets.DEFAULT_TTL_MINS }}
          envkey_AUTH_EXPIRE_BY_DAYS: ${{ secrets.AUTH_EXPIRE_BY_DAYS }}
          envkey_MULTICALL_CONTRACT: ${{ secrets.MULTICALL_CONTRACT }}
          envkey_OFAC_API_KEY: ${{ secrets.OFAC_API_KEY }}
          directory: packages/gql/
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: GQL Generate
        if: ${{ matrix.projectName == 'gql' }}
        run: cd packages/gql && npm run gql:gen
      - name: Test unit
        run: npx nx test ${{ matrix.projectName }} --ci --coverage --forceExit
  test-int:
    runs-on: ubuntu-latest
    environment: nftcom_dev
    needs: [get-affected]
    # Skip the job if there are not affected projects containing integration tests
    if:  ${{ fromJson(needs.get-affected.outputs.test-int)[0] }}
    strategy:
      max-parallel: 4
      # One job for each different project and node version
      matrix:
        node: ["16.x"]
        projectName: ${{fromJson(needs.get-affected.outputs.test-int)}}
    env:
      NODE: ${{ matrix.node }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: ${{ secrets.TEST_DB_DATABASE }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ secrets.TEST_DB_USERNAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_HOST: 'localhost'
          envkey_DB_PORT: 5432
          envkey_AUTH_MESSAGE: ${{ secrets.AUTH_MESSAGE }}
          envkey_SG_API_KEY: ${{ secrets.SG_API_KEY }}
          envkey_CONFIRM_EMAIL_URL: ${{ secrets.CONFIRM_EMAIL_URL }}
          envkey_ASSET_BUCKET: ${{ secrets.ASSET_BUCKET }}
          envkey_ASSET_BUCKET_ROLE: ${{ secrets.ASSET_BUCKET_ROLE }}
          envkey_ETH_GAS_STATION_API_KEY: ${{ secrets.ETH_GAS_STATION_API_KEY }}
          envkey_TEAM_AUTH_TOKEN: ${{ secrets.TEAM_AUTH_TOKEN }}
          envkey_MNEMONIC: ${{ secrets.MNEMONIC }}
          envkey_MNEMONIC_RINKEBY: ${{ secrets.MNEMONIC_RINKEBY }}
          envkey_HCS_TOPIC_ID: ${{ secrets.HCS_TOPIC_ID }}
          envkey_HCS_ENABLED: ${{ secrets.HCS_ENABLED }}
          envkey_HCS_ACCOUNT_ID: ${{ secrets.HCS_ACCOUNT_ID }}
          envkey_HCS_PRIVATE_KEY: ${{ secrets.HCS_PRIVATE_KEY }}
          envkey_ZMOK_API_URL: ${{ secrets.ZMOK_API_URL }}
          envkey_INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          envkey_CHAIN_ID: ${{ secrets.CHAIN_ID }}
          envkey_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          envkey_ACTIVITY_ENDPOINTS_ENABLED: ${{ secrets.ACTIVITY_ENDPOINTS_ENABLED }}
          envkey_ALCHEMY_API_URL: ${{ secrets.ALCHEMY_API_URL }}
          envkey_ALCHEMY_API_URL_RINKEBY: ${{ secrets.ALCHEMY_API_URL_RINKEBY }}
          envkey_ALCHEMY_API_URL_GOERLI: ${{ secrets.ALCHEMY_API_URL_GOERLI }}
          envkey_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          envkey_PUBLIC_SALE_KEY: ${{ secrets.PUBLIC_SALE_KEY }}
          envkey_SERVER_CONFIG: ${{ secrets.SERVER_CONFIG }}
          envkey_SHARED_MINT_SECRET: ${{ secrets.SHARED_MINT_SECRET }}
          envkey_SUPPORTED_NETWORKS: ${{ secrets.SUPPORTED_NETWORKS }}
          envkey_TYPESENSE_HOST: ${{ secrets.TYPESENSE_HOST }}
          envkey_TYPESENSE_API_KEY: ${{ secrets.TYPESENSE_API_KEY }}
          envkey_MINTED_PROFILE_EVENTS_MAX_BLOCKS: ${{ secrets.MINTED_PROFILE_EVENTS_MAX_BLOCKS }}
          envkey_PROFILE_NFTS_EXPIRE_DURATION: ${{ secrets.PROFILE_NFTS_EXPIRE_DURATION }}
          envkey_BULL_MAX_REPEAT_COUNT: ${{ secrets.BULL_MAX_REPEAT_COUNT }}
          envkey_OPENSEA_API_KEY: ${{ secrets.OPENSEA_API_KEY }}
          envkey_LOOKSRARE_API_KEY: ${{ secrets.LOOKSRARE_API_KEY }}
          envkey_NFTPORT_KEY: ${{ secrets.NFTPORT_KEY }}
          envkey_PROFILE_SCORE_EXPIRE_DURATION: ${{ secrets.PROFILE_SCORE_EXPIRE_DURATION }}
          envkey_NFT_EXTERNAL_ORDER_REFRESH_DURATION: ${{ secrets.NFT_EXTERNAL_ORDER_REFRESH_DURATION }}
          envkey_TEST_DB_HOST: 'localhost'
          envkey_TEST_DB_DATABASE: ${{ secrets.TEST_DB_DATABASE }}
          envkey_TEST_DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
          envkey_TEST_DB_PORT: 5432
          envkey_TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          envkey_TEST_DB_USE_SSL: ${{ secrets.TEST_DB_USE_SSL }}
          envkey_REFRESH_NFT_DURATION: ${{ secrets.REFRESH_NFT_DURATION }}
          envkey_IPFS_WEB_GATEWAY: ${{ secrets.IPFS_WEB_GATEWAY }}
          envkey_DEFAULT_TTL_MINS: ${{ secrets.DEFAULT_TTL_MINS }}
          envkey_AUTH_EXPIRE_BY_DAYS: ${{ secrets.AUTH_EXPIRE_BY_DAYS }}
          envkey_MULTICALL_CONTRACT: ${{ secrets.MULTICALL_CONTRACT }}
          envkey_OFAC_API_KEY: ${{ secrets.OFAC_API_KEY }}
          file_name: packages/gql/.env
          fail_on_empty: false
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: GQL Generate
        if: ${{ matrix.projectName == 'gql' }}
        run: cd packages/gql && npm run gql:gen
      - name: Test integrate
        run: npx nx test:int ${{ matrix.projectName }} --ci --runInBand --coverage --forceExit
  build-finished:
    runs-on: ubuntu-latest
    needs: [test-unit,test-int]
    if: |
      always() &&
      (needs.test-unit.result == 'success' || needs.test-unit.result == 'skipped') &&
      (needs.test-int.result == 'success' || needs.test-int.result == 'skipped')
    steps:
      - name: Trace
        run: echo "All jobs finished"