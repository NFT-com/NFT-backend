/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ILooksRareProtocol {
  export type NonceInvalidationParametersStruct = {
    orderHash: BytesLike;
    orderNonce: BigNumberish;
    isNonceInvalidated: boolean;
  };

  export type NonceInvalidationParametersStructOutput = [
    string,
    BigNumber,
    boolean
  ] & { orderHash: string; orderNonce: BigNumber; isNonceInvalidated: boolean };
}

export declare namespace OrderStructs {
  export type TakerStruct = {
    recipient: string;
    additionalParameters: BytesLike;
  };

  export type TakerStructOutput = [string, string] & {
    recipient: string;
    additionalParameters: string;
  };

  export type MakerStruct = {
    quoteType: BigNumberish;
    globalNonce: BigNumberish;
    subsetNonce: BigNumberish;
    orderNonce: BigNumberish;
    strategyId: BigNumberish;
    collectionType: BigNumberish;
    collection: string;
    currency: string;
    signer: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    price: BigNumberish;
    itemIds: BigNumberish[];
    amounts: BigNumberish[];
    additionalParameters: BytesLike;
  };

  export type MakerStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    string
  ] & {
    quoteType: number;
    globalNonce: BigNumber;
    subsetNonce: BigNumber;
    orderNonce: BigNumber;
    strategyId: BigNumber;
    collectionType: number;
    collection: string;
    currency: string;
    signer: string;
    startTime: BigNumber;
    endTime: BigNumber;
    price: BigNumber;
    itemIds: BigNumber[];
    amounts: BigNumber[];
    additionalParameters: string;
  };

  export type MerkleTreeNodeStruct = {
    value: BytesLike;
    position: BigNumberish;
  };

  export type MerkleTreeNodeStructOutput = [string, number] & {
    value: string;
    position: number;
  };

  export type MerkleTreeStruct = {
    root: BytesLike;
    proof: OrderStructs.MerkleTreeNodeStruct[];
  };

  export type MerkleTreeStructOutput = [
    string,
    OrderStructs.MerkleTreeNodeStructOutput[]
  ] & { root: string; proof: OrderStructs.MerkleTreeNodeStructOutput[] };
}

export interface LooksrareProtocolInterface extends utils.Interface {
  contractName: "LooksrareProtocol";
  functions: {
    "MAGIC_VALUE_ORDER_NONCE_EXECUTED()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addStrategy(uint16,uint16,uint16,bytes4,bool,address)": FunctionFragment;
    "affiliateController()": FunctionFragment;
    "affiliateRates(address)": FunctionFragment;
    "cancelOrderNonces(uint256[])": FunctionFragment;
    "cancelOwnershipTransfer()": FunctionFragment;
    "cancelSubsetNonces(uint256[])": FunctionFragment;
    "chainId()": FunctionFragment;
    "confirmOwnershipRenouncement()": FunctionFragment;
    "confirmOwnershipTransfer()": FunctionFragment;
    "creatorFeeManager()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeMultipleTakerBids((address,bytes)[],(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes)[],bytes[],(bytes32,(bytes32,uint8)[])[],address,bool)": FunctionFragment;
    "executeTakerAsk((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes),bytes,(bytes32,(bytes32,uint8)[]),address)": FunctionFragment;
    "executeTakerBid((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes),bytes,(bytes32,(bytes32,uint8)[]),address)": FunctionFragment;
    "hashBatchOrder(bytes32,uint256)": FunctionFragment;
    "incrementBidAskNonces(bool,bool)": FunctionFragment;
    "initiateOwnershipRenouncement()": FunctionFragment;
    "initiateOwnershipTransfer(address)": FunctionFragment;
    "isAffiliateProgramActive()": FunctionFragment;
    "isCurrencyAllowed(address)": FunctionFragment;
    "maxCreatorFeeBp()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipStatus()": FunctionFragment;
    "potentialOwner()": FunctionFragment;
    "protocolFeeRecipient()": FunctionFragment;
    "restrictedExecuteTakerBid((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes),address,bytes32)": FunctionFragment;
    "strategyInfo(uint256)": FunctionFragment;
    "transferManager()": FunctionFragment;
    "updateAffiliateController(address)": FunctionFragment;
    "updateAffiliateProgramStatus(bool)": FunctionFragment;
    "updateAffiliateRate(address,uint256)": FunctionFragment;
    "updateCreatorFeeManager(address)": FunctionFragment;
    "updateCurrencyStatus(address,bool)": FunctionFragment;
    "updateDomainSeparator()": FunctionFragment;
    "updateETHGasLimitForTransfer(uint256)": FunctionFragment;
    "updateMaxCreatorFeeBp(uint16)": FunctionFragment;
    "updateProtocolFeeRecipient(address)": FunctionFragment;
    "updateStrategy(uint256,bool,uint16,uint16)": FunctionFragment;
    "userBidAskNonces(address)": FunctionFragment;
    "userOrderNonce(address,uint256)": FunctionFragment;
    "userSubsetNonce(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAGIC_VALUE_ORDER_NONCE_EXECUTED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliateController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "affiliateRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrderNonces",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubsetNonces",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmOwnershipRenouncement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmOwnershipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMultipleTakerBids",
    values: [
      OrderStructs.TakerStruct[],
      OrderStructs.MakerStruct[],
      BytesLike[],
      OrderStructs.MerkleTreeStruct[],
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTakerAsk",
    values: [
      OrderStructs.TakerStruct,
      OrderStructs.MakerStruct,
      BytesLike,
      OrderStructs.MerkleTreeStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTakerBid",
    values: [
      OrderStructs.TakerStruct,
      OrderStructs.MakerStruct,
      BytesLike,
      OrderStructs.MerkleTreeStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashBatchOrder",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementBidAskNonces",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateOwnershipRenouncement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateOwnershipTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAffiliateProgramActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrencyAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCreatorFeeBp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "potentialOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedExecuteTakerBid",
    values: [
      OrderStructs.TakerStruct,
      OrderStructs.MakerStruct,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAffiliateController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAffiliateProgramStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAffiliateRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorFeeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCurrencyStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateETHGasLimitForTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxCreatorFeeBp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategy",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBidAskNonces",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrderNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSubsetNonce",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAGIC_VALUE_ORDER_NONCE_EXECUTED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliateController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrderNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubsetNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmOwnershipRenouncement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMultipleTakerBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTakerAsk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTakerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashBatchOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementBidAskNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateOwnershipRenouncement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAffiliateProgramActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCurrencyAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCreatorFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "potentialOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedExecuteTakerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAffiliateController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAffiliateProgramStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAffiliateRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrencyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateETHGasLimitForTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxCreatorFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidAskNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOrderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSubsetNonce",
    data: BytesLike
  ): Result;

  events: {
    "AffiliatePayment(address,address,uint256)": EventFragment;
    "CancelOwnershipTransfer()": EventFragment;
    "CurrencyStatusUpdated(address,bool)": EventFragment;
    "InitiateOwnershipRenouncement()": EventFragment;
    "InitiateOwnershipTransfer(address,address)": EventFragment;
    "NewAffiliateController(address)": EventFragment;
    "NewAffiliateProgramStatus(bool)": EventFragment;
    "NewAffiliateRate(address,uint256)": EventFragment;
    "NewBidAskNonces(address,uint256,uint256)": EventFragment;
    "NewCreatorFeeManager(address)": EventFragment;
    "NewDomainSeparator()": EventFragment;
    "NewGasLimitETHTransfer(uint256)": EventFragment;
    "NewMaxCreatorFeeBp(uint256)": EventFragment;
    "NewOwner(address)": EventFragment;
    "NewProtocolFeeRecipient(address)": EventFragment;
    "NewStrategy(uint256,uint16,uint16,uint16,bytes4,bool,address)": EventFragment;
    "OrderNoncesCancelled(address,uint256[])": EventFragment;
    "StrategyUpdated(uint256,bool,uint16,uint16)": EventFragment;
    "SubsetNoncesCancelled(address,uint256[])": EventFragment;
    "TakerAsk(tuple,address,address,uint256,address,address,uint256[],uint256[],address[2],uint256[3])": EventFragment;
    "TakerBid(tuple,address,address,uint256,address,address,uint256[],uint256[],address[2],uint256[3])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AffiliatePayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOwnershipTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurrencyStatusUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitiateOwnershipRenouncement"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateOwnershipTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAffiliateController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAffiliateProgramStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAffiliateRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBidAskNonces"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCreatorFeeManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDomainSeparator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGasLimitETHTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMaxCreatorFeeBp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProtocolFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderNoncesCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubsetNoncesCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerBid"): EventFragment;
}

export type AffiliatePaymentEvent = TypedEvent<
  [string, string, BigNumber],
  { affiliate: string; currency: string; affiliateFee: BigNumber }
>;

export type AffiliatePaymentEventFilter =
  TypedEventFilter<AffiliatePaymentEvent>;

export type CancelOwnershipTransferEvent = TypedEvent<[], {}>;

export type CancelOwnershipTransferEventFilter =
  TypedEventFilter<CancelOwnershipTransferEvent>;

export type CurrencyStatusUpdatedEvent = TypedEvent<
  [string, boolean],
  { currency: string; isAllowed: boolean }
>;

export type CurrencyStatusUpdatedEventFilter =
  TypedEventFilter<CurrencyStatusUpdatedEvent>;

export type InitiateOwnershipRenouncementEvent = TypedEvent<[], {}>;

export type InitiateOwnershipRenouncementEventFilter =
  TypedEventFilter<InitiateOwnershipRenouncementEvent>;

export type InitiateOwnershipTransferEvent = TypedEvent<
  [string, string],
  { previousOwner: string; potentialOwner: string }
>;

export type InitiateOwnershipTransferEventFilter =
  TypedEventFilter<InitiateOwnershipTransferEvent>;

export type NewAffiliateControllerEvent = TypedEvent<
  [string],
  { affiliateController: string }
>;

export type NewAffiliateControllerEventFilter =
  TypedEventFilter<NewAffiliateControllerEvent>;

export type NewAffiliateProgramStatusEvent = TypedEvent<
  [boolean],
  { isActive: boolean }
>;

export type NewAffiliateProgramStatusEventFilter =
  TypedEventFilter<NewAffiliateProgramStatusEvent>;

export type NewAffiliateRateEvent = TypedEvent<
  [string, BigNumber],
  { affiliate: string; rate: BigNumber }
>;

export type NewAffiliateRateEventFilter =
  TypedEventFilter<NewAffiliateRateEvent>;

export type NewBidAskNoncesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; bidNonce: BigNumber; askNonce: BigNumber }
>;

export type NewBidAskNoncesEventFilter = TypedEventFilter<NewBidAskNoncesEvent>;

export type NewCreatorFeeManagerEvent = TypedEvent<
  [string],
  { creatorFeeManager: string }
>;

export type NewCreatorFeeManagerEventFilter =
  TypedEventFilter<NewCreatorFeeManagerEvent>;

export type NewDomainSeparatorEvent = TypedEvent<[], {}>;

export type NewDomainSeparatorEventFilter =
  TypedEventFilter<NewDomainSeparatorEvent>;

export type NewGasLimitETHTransferEvent = TypedEvent<
  [BigNumber],
  { gasLimitETHTransfer: BigNumber }
>;

export type NewGasLimitETHTransferEventFilter =
  TypedEventFilter<NewGasLimitETHTransferEvent>;

export type NewMaxCreatorFeeBpEvent = TypedEvent<
  [BigNumber],
  { maxCreatorFeeBp: BigNumber }
>;

export type NewMaxCreatorFeeBpEventFilter =
  TypedEventFilter<NewMaxCreatorFeeBpEvent>;

export type NewOwnerEvent = TypedEvent<[string], { newOwner: string }>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export type NewProtocolFeeRecipientEvent = TypedEvent<
  [string],
  { protocolFeeRecipient: string }
>;

export type NewProtocolFeeRecipientEventFilter =
  TypedEventFilter<NewProtocolFeeRecipientEvent>;

export type NewStrategyEvent = TypedEvent<
  [BigNumber, number, number, number, string, boolean, string],
  {
    strategyId: BigNumber;
    standardProtocolFeeBp: number;
    minTotalFeeBp: number;
    maxProtocolFeeBp: number;
    selector: string;
    isMakerBid: boolean;
    implementation: string;
  }
>;

export type NewStrategyEventFilter = TypedEventFilter<NewStrategyEvent>;

export type OrderNoncesCancelledEvent = TypedEvent<
  [string, BigNumber[]],
  { user: string; orderNonces: BigNumber[] }
>;

export type OrderNoncesCancelledEventFilter =
  TypedEventFilter<OrderNoncesCancelledEvent>;

export type StrategyUpdatedEvent = TypedEvent<
  [BigNumber, boolean, number, number],
  {
    strategyId: BigNumber;
    isActive: boolean;
    standardProtocolFeeBp: number;
    minTotalFeeBp: number;
  }
>;

export type StrategyUpdatedEventFilter = TypedEventFilter<StrategyUpdatedEvent>;

export type SubsetNoncesCancelledEvent = TypedEvent<
  [string, BigNumber[]],
  { user: string; subsetNonces: BigNumber[] }
>;

export type SubsetNoncesCancelledEventFilter =
  TypedEventFilter<SubsetNoncesCancelledEvent>;

export type TakerAskEvent = TypedEvent<
  [
    ILooksRareProtocol.NonceInvalidationParametersStructOutput,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber[],
    BigNumber[],
    [string, string],
    [BigNumber, BigNumber, BigNumber]
  ],
  {
    nonceInvalidationParameters: ILooksRareProtocol.NonceInvalidationParametersStructOutput;
    askUser: string;
    bidUser: string;
    strategyId: BigNumber;
    currency: string;
    collection: string;
    itemIds: BigNumber[];
    amounts: BigNumber[];
    feeRecipients: [string, string];
    feeAmounts: [BigNumber, BigNumber, BigNumber];
  }
>;

export type TakerAskEventFilter = TypedEventFilter<TakerAskEvent>;

export type TakerBidEvent = TypedEvent<
  [
    ILooksRareProtocol.NonceInvalidationParametersStructOutput,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber[],
    BigNumber[],
    [string, string],
    [BigNumber, BigNumber, BigNumber]
  ],
  {
    nonceInvalidationParameters: ILooksRareProtocol.NonceInvalidationParametersStructOutput;
    bidUser: string;
    bidRecipient: string;
    strategyId: BigNumber;
    currency: string;
    collection: string;
    itemIds: BigNumber[];
    amounts: BigNumber[];
    feeRecipients: [string, string];
    feeAmounts: [BigNumber, BigNumber, BigNumber];
  }
>;

export type TakerBidEventFilter = TypedEventFilter<TakerBidEvent>;

export interface LooksrareProtocol extends BaseContract {
  contractName: "LooksrareProtocol";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LooksrareProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAGIC_VALUE_ORDER_NONCE_EXECUTED(
      overrides?: CallOverrides
    ): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addStrategy(
      standardProtocolFeeBp: BigNumberish,
      minTotalFeeBp: BigNumberish,
      maxProtocolFeeBp: BigNumberish,
      selector: BytesLike,
      isMakerBid: boolean,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    affiliateController(overrides?: CallOverrides): Promise<[string]>;

    affiliateRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOrderNonces(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSubsetNonces(
      subsetNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    confirmOwnershipRenouncement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmOwnershipTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorFeeManager(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    executeMultipleTakerBids(
      takerBids: OrderStructs.TakerStruct[],
      makerAsks: OrderStructs.MakerStruct[],
      makerSignatures: BytesLike[],
      merkleTrees: OrderStructs.MerkleTreeStruct[],
      affiliate: string,
      isAtomic: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeTakerAsk(
      takerAsk: OrderStructs.TakerStruct,
      makerBid: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashBatchOrder(
      root: BytesLike,
      proofLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { batchOrderHash: string }>;

    incrementBidAskNonces(
      bid: boolean,
      ask: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateOwnershipRenouncement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateOwnershipTransfer(
      newPotentialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAffiliateProgramActive(overrides?: CallOverrides): Promise<[boolean]>;

    isCurrencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxCreatorFeeBp(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownershipStatus(overrides?: CallOverrides): Promise<[number]>;

    potentialOwner(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    restrictedExecuteTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      sender: string,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number, string, boolean, string] & {
        isActive: boolean;
        standardProtocolFeeBp: number;
        minTotalFeeBp: number;
        maxProtocolFeeBp: number;
        selector: string;
        isMakerBid: boolean;
        implementation: string;
      }
    >;

    transferManager(overrides?: CallOverrides): Promise<[string]>;

    updateAffiliateController(
      newAffiliateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAffiliateProgramStatus(
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAffiliateRate(
      affiliate: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCreatorFeeManager(
      newCreatorFeeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCurrencyStatus(
      currency: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDomainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateETHGasLimitForTransfer(
      newGasLimitETHTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxCreatorFeeBp(
      newMaxCreatorFeeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeRecipient(
      newProtocolFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStrategy(
      strategyId: BigNumberish,
      isActive: boolean,
      newStandardProtocolFee: BigNumberish,
      newMinTotalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBidAskNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bidNonce: BigNumber; askNonce: BigNumber }
    >;

    userOrderNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userSubsetNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MAGIC_VALUE_ORDER_NONCE_EXECUTED(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addStrategy(
    standardProtocolFeeBp: BigNumberish,
    minTotalFeeBp: BigNumberish,
    maxProtocolFeeBp: BigNumberish,
    selector: BytesLike,
    isMakerBid: boolean,
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  affiliateController(overrides?: CallOverrides): Promise<string>;

  affiliateRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrderNonces(
    orderNonces: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOwnershipTransfer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSubsetNonces(
    subsetNonces: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  confirmOwnershipRenouncement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmOwnershipTransfer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorFeeManager(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  executeMultipleTakerBids(
    takerBids: OrderStructs.TakerStruct[],
    makerAsks: OrderStructs.MakerStruct[],
    makerSignatures: BytesLike[],
    merkleTrees: OrderStructs.MerkleTreeStruct[],
    affiliate: string,
    isAtomic: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeTakerAsk(
    takerAsk: OrderStructs.TakerStruct,
    makerBid: OrderStructs.MakerStruct,
    makerSignature: BytesLike,
    merkleTree: OrderStructs.MerkleTreeStruct,
    affiliate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeTakerBid(
    takerBid: OrderStructs.TakerStruct,
    makerAsk: OrderStructs.MakerStruct,
    makerSignature: BytesLike,
    merkleTree: OrderStructs.MerkleTreeStruct,
    affiliate: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashBatchOrder(
    root: BytesLike,
    proofLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  incrementBidAskNonces(
    bid: boolean,
    ask: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateOwnershipRenouncement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateOwnershipTransfer(
    newPotentialOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAffiliateProgramActive(overrides?: CallOverrides): Promise<boolean>;

  isCurrencyAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maxCreatorFeeBp(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipStatus(overrides?: CallOverrides): Promise<number>;

  potentialOwner(overrides?: CallOverrides): Promise<string>;

  protocolFeeRecipient(overrides?: CallOverrides): Promise<string>;

  restrictedExecuteTakerBid(
    takerBid: OrderStructs.TakerStruct,
    makerAsk: OrderStructs.MakerStruct,
    sender: string,
    orderHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, number, string, boolean, string] & {
      isActive: boolean;
      standardProtocolFeeBp: number;
      minTotalFeeBp: number;
      maxProtocolFeeBp: number;
      selector: string;
      isMakerBid: boolean;
      implementation: string;
    }
  >;

  transferManager(overrides?: CallOverrides): Promise<string>;

  updateAffiliateController(
    newAffiliateController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAffiliateProgramStatus(
    isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAffiliateRate(
    affiliate: string,
    bp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCreatorFeeManager(
    newCreatorFeeManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCurrencyStatus(
    currency: string,
    isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDomainSeparator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateETHGasLimitForTransfer(
    newGasLimitETHTransfer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxCreatorFeeBp(
    newMaxCreatorFeeBp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeRecipient(
    newProtocolFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStrategy(
    strategyId: BigNumberish,
    isActive: boolean,
    newStandardProtocolFee: BigNumberish,
    newMinTotalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBidAskNonces(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { bidNonce: BigNumber; askNonce: BigNumber }
  >;

  userOrderNonce(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  userSubsetNonce(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MAGIC_VALUE_ORDER_NONCE_EXECUTED(
      overrides?: CallOverrides
    ): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addStrategy(
      standardProtocolFeeBp: BigNumberish,
      minTotalFeeBp: BigNumberish,
      maxProtocolFeeBp: BigNumberish,
      selector: BytesLike,
      isMakerBid: boolean,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    affiliateController(overrides?: CallOverrides): Promise<string>;

    affiliateRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrderNonces(
      orderNonces: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipTransfer(overrides?: CallOverrides): Promise<void>;

    cancelSubsetNonces(
      subsetNonces: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    confirmOwnershipRenouncement(overrides?: CallOverrides): Promise<void>;

    confirmOwnershipTransfer(overrides?: CallOverrides): Promise<void>;

    creatorFeeManager(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    executeMultipleTakerBids(
      takerBids: OrderStructs.TakerStruct[],
      makerAsks: OrderStructs.MakerStruct[],
      makerSignatures: BytesLike[],
      merkleTrees: OrderStructs.MerkleTreeStruct[],
      affiliate: string,
      isAtomic: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTakerAsk(
      takerAsk: OrderStructs.TakerStruct,
      makerBid: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hashBatchOrder(
      root: BytesLike,
      proofLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    incrementBidAskNonces(
      bid: boolean,
      ask: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateOwnershipRenouncement(overrides?: CallOverrides): Promise<void>;

    initiateOwnershipTransfer(
      newPotentialOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAffiliateProgramActive(overrides?: CallOverrides): Promise<boolean>;

    isCurrencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxCreatorFeeBp(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipStatus(overrides?: CallOverrides): Promise<number>;

    potentialOwner(overrides?: CallOverrides): Promise<string>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<string>;

    restrictedExecuteTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      sender: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number, string, boolean, string] & {
        isActive: boolean;
        standardProtocolFeeBp: number;
        minTotalFeeBp: number;
        maxProtocolFeeBp: number;
        selector: string;
        isMakerBid: boolean;
        implementation: string;
      }
    >;

    transferManager(overrides?: CallOverrides): Promise<string>;

    updateAffiliateController(
      newAffiliateController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAffiliateProgramStatus(
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAffiliateRate(
      affiliate: string,
      bp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorFeeManager(
      newCreatorFeeManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCurrencyStatus(
      currency: string,
      isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDomainSeparator(overrides?: CallOverrides): Promise<void>;

    updateETHGasLimitForTransfer(
      newGasLimitETHTransfer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxCreatorFeeBp(
      newMaxCreatorFeeBp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolFeeRecipient(
      newProtocolFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategy(
      strategyId: BigNumberish,
      isActive: boolean,
      newStandardProtocolFee: BigNumberish,
      newMinTotalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userBidAskNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bidNonce: BigNumber; askNonce: BigNumber }
    >;

    userOrderNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    userSubsetNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AffiliatePayment(address,address,uint256)"(
      affiliate?: null,
      currency?: null,
      affiliateFee?: null
    ): AffiliatePaymentEventFilter;
    AffiliatePayment(
      affiliate?: null,
      currency?: null,
      affiliateFee?: null
    ): AffiliatePaymentEventFilter;

    "CancelOwnershipTransfer()"(): CancelOwnershipTransferEventFilter;
    CancelOwnershipTransfer(): CancelOwnershipTransferEventFilter;

    "CurrencyStatusUpdated(address,bool)"(
      currency?: null,
      isAllowed?: null
    ): CurrencyStatusUpdatedEventFilter;
    CurrencyStatusUpdated(
      currency?: null,
      isAllowed?: null
    ): CurrencyStatusUpdatedEventFilter;

    "InitiateOwnershipRenouncement()"(): InitiateOwnershipRenouncementEventFilter;
    InitiateOwnershipRenouncement(): InitiateOwnershipRenouncementEventFilter;

    "InitiateOwnershipTransfer(address,address)"(
      previousOwner?: null,
      potentialOwner?: null
    ): InitiateOwnershipTransferEventFilter;
    InitiateOwnershipTransfer(
      previousOwner?: null,
      potentialOwner?: null
    ): InitiateOwnershipTransferEventFilter;

    "NewAffiliateController(address)"(
      affiliateController?: null
    ): NewAffiliateControllerEventFilter;
    NewAffiliateController(
      affiliateController?: null
    ): NewAffiliateControllerEventFilter;

    "NewAffiliateProgramStatus(bool)"(
      isActive?: null
    ): NewAffiliateProgramStatusEventFilter;
    NewAffiliateProgramStatus(
      isActive?: null
    ): NewAffiliateProgramStatusEventFilter;

    "NewAffiliateRate(address,uint256)"(
      affiliate?: null,
      rate?: null
    ): NewAffiliateRateEventFilter;
    NewAffiliateRate(
      affiliate?: null,
      rate?: null
    ): NewAffiliateRateEventFilter;

    "NewBidAskNonces(address,uint256,uint256)"(
      user?: null,
      bidNonce?: null,
      askNonce?: null
    ): NewBidAskNoncesEventFilter;
    NewBidAskNonces(
      user?: null,
      bidNonce?: null,
      askNonce?: null
    ): NewBidAskNoncesEventFilter;

    "NewCreatorFeeManager(address)"(
      creatorFeeManager?: null
    ): NewCreatorFeeManagerEventFilter;
    NewCreatorFeeManager(
      creatorFeeManager?: null
    ): NewCreatorFeeManagerEventFilter;

    "NewDomainSeparator()"(): NewDomainSeparatorEventFilter;
    NewDomainSeparator(): NewDomainSeparatorEventFilter;

    "NewGasLimitETHTransfer(uint256)"(
      gasLimitETHTransfer?: null
    ): NewGasLimitETHTransferEventFilter;
    NewGasLimitETHTransfer(
      gasLimitETHTransfer?: null
    ): NewGasLimitETHTransferEventFilter;

    "NewMaxCreatorFeeBp(uint256)"(
      maxCreatorFeeBp?: null
    ): NewMaxCreatorFeeBpEventFilter;
    NewMaxCreatorFeeBp(maxCreatorFeeBp?: null): NewMaxCreatorFeeBpEventFilter;

    "NewOwner(address)"(newOwner?: null): NewOwnerEventFilter;
    NewOwner(newOwner?: null): NewOwnerEventFilter;

    "NewProtocolFeeRecipient(address)"(
      protocolFeeRecipient?: null
    ): NewProtocolFeeRecipientEventFilter;
    NewProtocolFeeRecipient(
      protocolFeeRecipient?: null
    ): NewProtocolFeeRecipientEventFilter;

    "NewStrategy(uint256,uint16,uint16,uint16,bytes4,bool,address)"(
      strategyId?: null,
      standardProtocolFeeBp?: null,
      minTotalFeeBp?: null,
      maxProtocolFeeBp?: null,
      selector?: null,
      isMakerBid?: null,
      implementation?: null
    ): NewStrategyEventFilter;
    NewStrategy(
      strategyId?: null,
      standardProtocolFeeBp?: null,
      minTotalFeeBp?: null,
      maxProtocolFeeBp?: null,
      selector?: null,
      isMakerBid?: null,
      implementation?: null
    ): NewStrategyEventFilter;

    "OrderNoncesCancelled(address,uint256[])"(
      user?: null,
      orderNonces?: null
    ): OrderNoncesCancelledEventFilter;
    OrderNoncesCancelled(
      user?: null,
      orderNonces?: null
    ): OrderNoncesCancelledEventFilter;

    "StrategyUpdated(uint256,bool,uint16,uint16)"(
      strategyId?: null,
      isActive?: null,
      standardProtocolFeeBp?: null,
      minTotalFeeBp?: null
    ): StrategyUpdatedEventFilter;
    StrategyUpdated(
      strategyId?: null,
      isActive?: null,
      standardProtocolFeeBp?: null,
      minTotalFeeBp?: null
    ): StrategyUpdatedEventFilter;

    "SubsetNoncesCancelled(address,uint256[])"(
      user?: null,
      subsetNonces?: null
    ): SubsetNoncesCancelledEventFilter;
    SubsetNoncesCancelled(
      user?: null,
      subsetNonces?: null
    ): SubsetNoncesCancelledEventFilter;

    "TakerAsk(tuple,address,address,uint256,address,address,uint256[],uint256[],address[2],uint256[3])"(
      nonceInvalidationParameters?: null,
      askUser?: null,
      bidUser?: null,
      strategyId?: null,
      currency?: null,
      collection?: null,
      itemIds?: null,
      amounts?: null,
      feeRecipients?: null,
      feeAmounts?: null
    ): TakerAskEventFilter;
    TakerAsk(
      nonceInvalidationParameters?: null,
      askUser?: null,
      bidUser?: null,
      strategyId?: null,
      currency?: null,
      collection?: null,
      itemIds?: null,
      amounts?: null,
      feeRecipients?: null,
      feeAmounts?: null
    ): TakerAskEventFilter;

    "TakerBid(tuple,address,address,uint256,address,address,uint256[],uint256[],address[2],uint256[3])"(
      nonceInvalidationParameters?: null,
      bidUser?: null,
      bidRecipient?: null,
      strategyId?: null,
      currency?: null,
      collection?: null,
      itemIds?: null,
      amounts?: null,
      feeRecipients?: null,
      feeAmounts?: null
    ): TakerBidEventFilter;
    TakerBid(
      nonceInvalidationParameters?: null,
      bidUser?: null,
      bidRecipient?: null,
      strategyId?: null,
      currency?: null,
      collection?: null,
      itemIds?: null,
      amounts?: null,
      feeRecipients?: null,
      feeAmounts?: null
    ): TakerBidEventFilter;
  };

  estimateGas: {
    MAGIC_VALUE_ORDER_NONCE_EXECUTED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      standardProtocolFeeBp: BigNumberish,
      minTotalFeeBp: BigNumberish,
      maxProtocolFeeBp: BigNumberish,
      selector: BytesLike,
      isMakerBid: boolean,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    affiliateController(overrides?: CallOverrides): Promise<BigNumber>;

    affiliateRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrderNonces(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSubsetNonces(
      subsetNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    confirmOwnershipRenouncement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmOwnershipTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    executeMultipleTakerBids(
      takerBids: OrderStructs.TakerStruct[],
      makerAsks: OrderStructs.MakerStruct[],
      makerSignatures: BytesLike[],
      merkleTrees: OrderStructs.MerkleTreeStruct[],
      affiliate: string,
      isAtomic: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeTakerAsk(
      takerAsk: OrderStructs.TakerStruct,
      makerBid: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashBatchOrder(
      root: BytesLike,
      proofLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementBidAskNonces(
      bid: boolean,
      ask: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateOwnershipRenouncement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateOwnershipTransfer(
      newPotentialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAffiliateProgramActive(overrides?: CallOverrides): Promise<BigNumber>;

    isCurrencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCreatorFeeBp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipStatus(overrides?: CallOverrides): Promise<BigNumber>;

    potentialOwner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    restrictedExecuteTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      sender: string,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferManager(overrides?: CallOverrides): Promise<BigNumber>;

    updateAffiliateController(
      newAffiliateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAffiliateProgramStatus(
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAffiliateRate(
      affiliate: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCreatorFeeManager(
      newCreatorFeeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCurrencyStatus(
      currency: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDomainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateETHGasLimitForTransfer(
      newGasLimitETHTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxCreatorFeeBp(
      newMaxCreatorFeeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeRecipient(
      newProtocolFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStrategy(
      strategyId: BigNumberish,
      isActive: boolean,
      newStandardProtocolFee: BigNumberish,
      newMinTotalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBidAskNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOrderNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userSubsetNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAGIC_VALUE_ORDER_NONCE_EXECUTED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      standardProtocolFeeBp: BigNumberish,
      minTotalFeeBp: BigNumberish,
      maxProtocolFeeBp: BigNumberish,
      selector: BytesLike,
      isMakerBid: boolean,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    affiliateController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    affiliateRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrderNonces(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSubsetNonces(
      subsetNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmOwnershipRenouncement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmOwnershipTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMultipleTakerBids(
      takerBids: OrderStructs.TakerStruct[],
      makerAsks: OrderStructs.MakerStruct[],
      makerSignatures: BytesLike[],
      merkleTrees: OrderStructs.MerkleTreeStruct[],
      affiliate: string,
      isAtomic: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeTakerAsk(
      takerAsk: OrderStructs.TakerStruct,
      makerBid: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      makerSignature: BytesLike,
      merkleTree: OrderStructs.MerkleTreeStruct,
      affiliate: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashBatchOrder(
      root: BytesLike,
      proofLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementBidAskNonces(
      bid: boolean,
      ask: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateOwnershipRenouncement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateOwnershipTransfer(
      newPotentialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAffiliateProgramActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCurrencyAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCreatorFeeBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    potentialOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restrictedExecuteTakerBid(
      takerBid: OrderStructs.TakerStruct,
      makerAsk: OrderStructs.MakerStruct,
      sender: string,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAffiliateController(
      newAffiliateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAffiliateProgramStatus(
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAffiliateRate(
      affiliate: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCreatorFeeManager(
      newCreatorFeeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCurrencyStatus(
      currency: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDomainSeparator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateETHGasLimitForTransfer(
      newGasLimitETHTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxCreatorFeeBp(
      newMaxCreatorFeeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeRecipient(
      newProtocolFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategy(
      strategyId: BigNumberish,
      isActive: boolean,
      newStandardProtocolFee: BigNumberish,
      newMinTotalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBidAskNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOrderNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userSubsetNonce(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
