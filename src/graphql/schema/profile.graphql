type FollowersOutput {
  wallets: [Wallet!]!
  pageInfo: PageInfo
}

input FollowersInput {
  profileId: ID!
  pageInput: PageInput
}

enum ProfileStatus {
  Available
  Pending
  Owned
}

type Profile {
  id: ID!
  bannerURL: String
  creator: Wallet
  isFollowedByMe: Boolean
  isOwnedByMe: Boolean
  owner: Wallet
  status: ProfileStatus
  url: String!
  createdAt: DateTime!
}

input ProfilesInput {
  pageInput: PageInput
}

type ProfilesOutput {
  profiles: [Profile!]!
  pageInfo: PageInfo
}

extend type Query {
  # TODO do we need to gate this?
  profileFollowers(input: FollowersInput!): FollowersOutput!
  profilesFollowedByMe(input: ProfilesInput): ProfilesOutput!
  myProfiles(input: ProfilesInput): ProfilesOutput!
  profile(url: String!): Profile!
}

extend type Mutation {
  followProfile(id: ID!): Profile!
  unfollowProfile(id: ID!): Profile!
}
