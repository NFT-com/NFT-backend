type FileUploadOutput {
  bucket: String!
  accessKey: String!
  secretKey: String!
  sessionToken: String!
}

input EndAuctionInput {
  profileId: String!
  walletId: String!  
}

type EndAuctionOutput {
  id: ID!
  price: Uint256!
  profile: Profile
}

type EndGkWinner {
  key: String
  value: String
}

type EndGkOutput {
  topBids: [EndGkWinner]!
  firstLosingBid: [EndGkWinner]!
  whitelistWinnersCount: Uint256!
  medianPrice: String!
  totalBidsCount: Uint256!
}

input getContractsInput {
  chainId: String!
}

type ContractInfo {
  address: String!
  abi: String!
}

type GetContracts {
  marketplace: ContractInfo!
  marketplaceEvent: ContractInfo!
  validationLogic: ContractInfo!
  nftToken: ContractInfo!
  profileAuction: ContractInfo!
  genesisKey: ContractInfo!
}

extend type Query {
  getContracts(input: getContractsInput!): GetContracts!
}

extend type Mutation {
  uploadFileSession: FileUploadOutput!
  endProfileAuction(input: EndAuctionInput!): EndAuctionOutput!
  endGKBlindAuction: EndGkOutput!
}
