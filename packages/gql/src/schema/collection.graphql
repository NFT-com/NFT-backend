type OpenseaCollectionV1 {
  banner_image_url: String
  created_date: String
  description: String
  discord_url: String
  external_url: String
  featured: Boolean
  featured_image_url: String
  safelist_request_status: String
  image_url: String
  large_image_url: String
  name: String
  opensea_buyer_fee_basis_points: String
  opensea_seller_fee_basis_points: String
  short_description: String
  slug: String
  telegram_url: String
  twitter_username: String
  instagram_username: String
  wiki_url: String
}

type OpenseaStatsV1 {
  one_day_volume: String
  one_day_change: String
  one_day_sales: String
  one_day_average_price: String
  seven_day_volume: String
  seven_day_change: String
  seven_day_sales: String
  seven_day_average_price: String
  thirty_day_volume: String
  thirty_day_change: String
  thirty_day_sales: String
  thirty_day_average_price: String
  total_volume: String
  total_sales: String
  total_supply: String
  count: String
  num_owners: String
  average_price: String
  num_reports: String
  market_cap: String
  floor_price: String
}

type OpenseaContract {
  collection: OpenseaCollectionV1
  address: String
  created_date: String
  name: String
  symbol: String
  total_supply: String
  description: String
  external_link: String
  image_url: String
}

type OpenseaStats {
  stats: OpenseaStatsV1
}

type Collection {
  id: ID
  contract: Address
  name: String
  chainId: String
  deployer: String
  bannerUrl: String
  logoUrl: String
  description: String
  isCurated: Boolean
  isSpam: Boolean
  isOfficial: Boolean
  floorPrice: Float
  totalVolume: Float
  averagePrice: Float
  stats: NFTPortStatistics
  likeCount: Int
  isLikedByUser: Boolean
  isLikedBy(likedById: ID!): Boolean
}

type NFTPortResults {
  name: String
  symbol: String
  bannerUrl: String
  logoUrl: String
  description: String
}

type CollectionInfo {
  collection: Collection
  nftPortResults: NFTPortResults
}

input CollectionInput {
  contract: Address!
  chainId: String
  network: String!
}

input FillChainIdsInput {
  chainId: String
  entity: String!
}

type RemoveDuplicatesOutput {
  message: String
}

type saveCollectionForContractOutput {
  message: String
}

type UpdateCollectionImageUrlsOutput {
  message: String
}

type UpdateCollectionNameOutput {
  message: String
}

type SyncCollectionsWithNFTsOutput {
  message: String
}

type FillChainIdsOutput {
  message: String
}

type AssociatedAddressesForContractOutput {
  deployerAddress: Address
  associatedAddresses: [Address]
  deployerIsAssociated: Boolean
}

type UpdateOfficialCollectionsOutput {
  message: String
}

type UpdateSpamStatusOutput {
  message: String
}

input CollectionTraitsInput {
  contract: Address!
}

type CollectionTraitsSummary {
  stats: TraitsSummaryStats
  traits: [TraitsSummaryData]
}

type TraitsSummaryStats {
  totalCount: Int
}

type TraitsSummaryData {
  type: String
  counts: [TraitCounts]
}

type TraitCounts {
  count: Int
  value: String
}

input CollectionLeaderboardInput {
  pageInput: PageInput
  dateRange: String
}

type CollectionLeaderboard {
  items: [Collection]!
  pageInfo: PageInfo
  totalItems: Int
}

"""
Basic collection type of `isOfficial=true` only collections.
(Used for generating sitemaps)
"""
type OfficialCollection {
  id: ID!
  name: String!
  contract: Address!
  chainId: String!
  updatedAt: DateTime!
}

type OfficialCollectionsOutput {
  items: [OfficialCollection!]!
  pageCount: Int
  totalItems: Int
}

input OfficialCollectionsInput {
  offsetPageInput: OffsetPageInput
}

extend type Query {
  collection(input: CollectionInput!): CollectionInfo
  collectionsByDeployer(deployer: String!): [Collection]
  collectionLeaderboard(input: CollectionLeaderboardInput): CollectionLeaderboard
  collectionTraits(input: CollectionTraitsInput!): CollectionTraitsSummary
  officialCollections(input: OfficialCollectionsInput!): OfficialCollectionsOutput
  numberOfNFTs(contract: Address!, chainId: String): Int
  associatedAddressesForContract(contract: Address!): AssociatedAddressesForContractOutput!
}

extend type Mutation {
  removeDuplicates(contracts: [Address!]!): RemoveDuplicatesOutput!
  "AUTHETICATED"
  refreshCollectionRarity(id: ID!, ttl: DateTime, force: Boolean): String!
  saveCollectionForContract(contract: Address!): saveCollectionForContractOutput!
  syncCollectionsWithNFTs(count: Int!): SyncCollectionsWithNFTsOutput!
  fillChainIds(input: FillChainIdsInput!): FillChainIdsOutput!
  updateCollectionImageUrls(count: Int!): UpdateCollectionImageUrlsOutput!
  updateCollectionName(count: Int!): UpdateCollectionNameOutput!
  updateSpamStatus(contracts: [Address!]!, isSpam: Boolean!): UpdateSpamStatusOutput!
  updateOfficialCollections(list: Upload!): UpdateOfficialCollectionsOutput!
}
