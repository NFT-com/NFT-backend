/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace LibAsset {
  export type AssetTypeStruct = { assetClass: BytesLike; data: BytesLike };

  export type AssetTypeStructOutput = [string, string] & {
    assetClass: string;
    data: string;
  };

  export type AssetStruct = {
    assetType: LibAsset.AssetTypeStruct;
    data: BytesLike;
  };

  export type AssetStructOutput = [LibAsset.AssetTypeStructOutput, string] & {
    assetType: LibAsset.AssetTypeStructOutput;
    data: string;
  };
}

export declare namespace LibSignature {
  export type OrderStruct = {
    maker: string;
    makeAssets: LibAsset.AssetStruct[];
    taker: string;
    takeAssets: LibAsset.AssetStruct[];
    salt: BigNumberish;
    start: BigNumberish;
    end: BigNumberish;
  };

  export type OrderStructOutput = [
    string,
    LibAsset.AssetStructOutput[],
    string,
    LibAsset.AssetStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maker: string;
    makeAssets: LibAsset.AssetStructOutput[];
    taker: string;
    takeAssets: LibAsset.AssetStructOutput[];
    salt: BigNumber;
    start: BigNumber;
    end: BigNumber;
  };
}

export interface NftMarketplaceInterface extends utils.Interface {
  contractName: "NftMarketplace";
  functions: {
    "approveOrder_((address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256))": FunctionFragment;
    "approvedOrders(bytes32)": FunctionFragment;
    "buyNow((address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256),uint8,bytes32,bytes32)": FunctionFragment;
    "cancel((address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256))": FunctionFragment;
    "cancelledOrFinalized(bytes32)": FunctionFragment;
    "changeProtocolFee(uint256)": FunctionFragment;
    "concatVRS(uint8,bytes32,bytes32)": FunctionFragment;
    "executeSwap((address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256),(address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256),uint8[2],bytes32[2],bytes32[2])": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "modifyWhitelist(address,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "proxies(bytes4)": FunctionFragment;
    "recoverVRS(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTransferProxy(bytes4,address)": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validateMatch_((address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256),(address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256))": FunctionFragment;
    "validateOrder_((address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256),uint8,bytes32,bytes32)": FunctionFragment;
    "whitelistERC20(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [LibSignature.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNow",
    values: [LibSignature.OrderStruct, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [LibSignature.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrFinalized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "concatVRS",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [
      LibSignature.OrderStruct,
      LibSignature.OrderStruct,
      [BigNumberish, BigNumberish],
      [BytesLike, BytesLike],
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proxies", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "recoverVRS",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferProxy",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMatch_",
    values: [LibSignature.OrderStruct, LibSignature.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrder_",
    values: [LibSignature.OrderStruct, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistERC20",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "concatVRS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverVRS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMatch_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistERC20",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(bytes32,address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Cancel(bytes32,address,address)": EventFragment;
    "Match(bytes32,bytes32,address,address,uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolFeeChange(uint256)": EventFragment;
    "ProxyChange(bytes4,address)": EventFragment;
    "Transfer(tuple,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WhitelistChange(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistChange"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, string],
  { hash: string; maker: string; taker: string }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CancelEvent = TypedEvent<
  [string, string, string],
  { hash: string; maker: string; taker: string }
>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export type MatchEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, boolean],
  {
    makerHash: string;
    takerHash: string;
    makerMaker: string;
    takerMaker: string;
    makerSalt: BigNumber;
    takerSalt: BigNumber;
    privateSale: boolean;
  }
>;

export type MatchEventFilter = TypedEventFilter<MatchEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProtocolFeeChangeEvent = TypedEvent<
  [BigNumber],
  { fee: BigNumber }
>;

export type ProtocolFeeChangeEventFilter =
  TypedEventFilter<ProtocolFeeChangeEvent>;

export type ProxyChangeEvent = TypedEvent<
  [string, string],
  { assetType: string; proxy: string }
>;

export type ProxyChangeEventFilter = TypedEventFilter<ProxyChangeEvent>;

export type TransferEvent = TypedEvent<
  [LibAsset.AssetStructOutput, string, string],
  { asset: LibAsset.AssetStructOutput; from: string; to: string }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export type WhitelistChangeEvent = TypedEvent<
  [string, boolean],
  { token: string; value: boolean }
>;

export type WhitelistChangeEventFilter = TypedEventFilter<WhitelistChangeEvent>;

export interface NftMarketplace extends BaseContract {
  contractName: "NftMarketplace";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveOrder_(
      order: LibSignature.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    buyNow(
      sellOrder: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      order: LibSignature.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    concatVRS(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executeSwap(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _transferProxy: string,
      _erc20TransferProxy: string,
      _cryptoKittyProxy: string,
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyWhitelist(
      _token: string,
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxies(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    recoverVRS(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferProxy(
      assetType: BytesLike,
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateMatch_(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateOrder_(
      order: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    whitelistERC20(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  approveOrder_(
    order: LibSignature.OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedOrders(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  buyNow(
    sellOrder: LibSignature.OrderStruct,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    order: LibSignature.OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelledOrFinalized(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeProtocolFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  concatVRS(
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  executeSwap(
    sellOrder: LibSignature.OrderStruct,
    buyOrder: LibSignature.OrderStruct,
    v: [BigNumberish, BigNumberish],
    r: [BytesLike, BytesLike],
    s: [BytesLike, BytesLike],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _transferProxy: string,
    _erc20TransferProxy: string,
    _cryptoKittyProxy: string,
    _stakingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyWhitelist(
    _token: string,
    _val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  proxies(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  recoverVRS(
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string, string]>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferProxy(
    assetType: BytesLike,
    proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateMatch_(
    sellOrder: LibSignature.OrderStruct,
    buyOrder: LibSignature.OrderStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateOrder_(
    order: LibSignature.OrderStruct,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  whitelistERC20(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    approveOrder_(
      order: LibSignature.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyNow(
      sellOrder: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      order: LibSignature.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeProtocolFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    concatVRS(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    executeSwap(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _transferProxy: string,
      _erc20TransferProxy: string,
      _cryptoKittyProxy: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyWhitelist(
      _token: string,
      _val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    proxies(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    recoverVRS(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTransferProxy(
      assetType: BytesLike,
      proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateMatch_(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateOrder_(
      order: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    whitelistERC20(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(bytes32,address,address)"(
      hash?: null,
      maker?: null,
      taker?: null
    ): ApprovalEventFilter;
    Approval(hash?: null, maker?: null, taker?: null): ApprovalEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Cancel(bytes32,address,address)"(
      hash?: null,
      maker?: null,
      taker?: null
    ): CancelEventFilter;
    Cancel(hash?: null, maker?: null, taker?: null): CancelEventFilter;

    "Match(bytes32,bytes32,address,address,uint256,uint256,bool)"(
      makerHash?: null,
      takerHash?: null,
      makerMaker?: null,
      takerMaker?: null,
      makerSalt?: null,
      takerSalt?: null,
      privateSale?: null
    ): MatchEventFilter;
    Match(
      makerHash?: null,
      takerHash?: null,
      makerMaker?: null,
      takerMaker?: null,
      makerSalt?: null,
      takerSalt?: null,
      privateSale?: null
    ): MatchEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProtocolFeeChange(uint256)"(fee?: null): ProtocolFeeChangeEventFilter;
    ProtocolFeeChange(fee?: null): ProtocolFeeChangeEventFilter;

    "ProxyChange(bytes4,address)"(
      assetType?: BytesLike | null,
      proxy?: null
    ): ProxyChangeEventFilter;
    ProxyChange(
      assetType?: BytesLike | null,
      proxy?: null
    ): ProxyChangeEventFilter;

    "Transfer(tuple,address,address)"(
      asset?: null,
      from?: null,
      to?: null
    ): TransferEventFilter;
    Transfer(asset?: null, from?: null, to?: null): TransferEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WhitelistChange(address,bool)"(
      token?: null,
      value?: null
    ): WhitelistChangeEventFilter;
    WhitelistChange(token?: null, value?: null): WhitelistChangeEventFilter;
  };

  estimateGas: {
    approveOrder_(
      order: LibSignature.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyNow(
      sellOrder: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      order: LibSignature.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    concatVRS(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeSwap(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _transferProxy: string,
      _erc20TransferProxy: string,
      _cryptoKittyProxy: string,
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyWhitelist(
      _token: string,
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    proxies(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    recoverVRS(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferProxy(
      assetType: BytesLike,
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateMatch_(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrder_(
      order: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveOrder_(
      order: LibSignature.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyNow(
      sellOrder: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      order: LibSignature.OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    concatVRS(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeSwap(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _transferProxy: string,
      _erc20TransferProxy: string,
      _cryptoKittyProxy: string,
      _stakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyWhitelist(
      _token: string,
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverVRS(
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferProxy(
      assetType: BytesLike,
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateMatch_(
      sellOrder: LibSignature.OrderStruct,
      buyOrder: LibSignature.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrder_(
      order: LibSignature.OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistERC20(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
