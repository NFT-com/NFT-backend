name: Deploy Env
description: Deploys the infrastrcuture and apps to an environment
inputs:
  stage:
    description: Environment to deploy on
    required: true
    default: dev
  secrets:
    description: Secrets
    required: true
runs:
  using: composite
  steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 16.x
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ fromJSON(inputs.secrets).AWS_ACCESS_KEY_ID }}
        aws-region: ${{ fromJSON(inputs.secrets).AWS_REGION }}
        aws-secret-access-key: ${{ fromJSON(inputs.secrets).AWS_SECRET_ACCESS_KEY }}
    - name: Login to AWS ECR
      id: login_ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Install pulumi
      uses: pulumi/setup-pulumi@v2
    - name: Login to Pulumi backend
      shell: bash
      run: pulumi login s3://nftcom-pulumi-state
    - name: Install Infra Deps
      working-directory: infra
      shell: bash
      run: npm install
    - name: Deploy Shared Infra
      working-directory: infra
      shell: bash
      env:
        STAGE: ${{ inputs.stage }}
        PULUMI_CONFIG_PASSPHRASE: ""
        AWS_ACCOUNT_ID: ${{ fromJSON(inputs.secrets).AWS_ACCOUNT_ID }}
        DB_PASSWORD: ${{ fromJSON(inputs.secrets).DB_PASSWORD }}
      run: npm run deploy:shared
    - name: Build GQL Env File
      shell: bash
      working-directory: infra
      env:
        STAGE: ${{ inputs.stage }}
        DB_PASSWORD: ${{ fromJSON(inputs.secrets).DB_PASSWORD }}
        CHAIN_ID: ${{ fromJSON(inputs.secrets).CHAIN_ID }}
        AUTH_MESSAGE: ${{ fromJSON(inputs.secrets).AUTH_MESSAGE }}
        SG_API_KEY: ${{ fromJSON(inputs.secrets).SG_API_KEY }}
        ETH_GAS_STATION_API_KEY: ${{ fromJSON(inputs.secrets).ETH_GAS_STATION_API_KEY }}
        PROFILE_AUCTION_END_PASSWORD: ${{ fromJSON(inputs.secrets).PROFILE_AUCTION_END_PASSWORD }}
        MNEMONIC: ${{ fromJSON(inputs.secrets).MNEMONIC }}
        MNEMONIC_RINKEBY: ${{ fromJSON(inputs.secrets).MNEMONIC_RINKEBY }}
        HCS_TOPIC_ID: ${{ fromJSON(inputs.secrets).HCS_TOPIC_ID }}
        HCS_ACCOUNT_ID: ${{ fromJSON(inputs.secrets).HCS_ACCOUNT_ID }}
        HCS_PRIVATE_KEY: ${{ fromJSON(inputs.secrets).HCS_PRIVATE_KEY }}
        ZMOK_API_URL: ${{ fromJSON(inputs.secrets).ZMOK_API_URL }}
        INFURA_API_KEY: ${{ fromJSON(inputs.secrets).INFURA_API_KEY }}
        ALCHEMY_API_KEY: ${{ fromJSON(inputs.secrets).ALCHEMY_API_KEY }}
        ALCHEMY_API_URL: ${{ fromJSON(inputs.secrets).ALCHEMY_API_URL }}
        ALCHEMY_API_URL_RINKEBY: ${{ fromJSON(inputs.secrets).ALCHEMY_API_URL_RINKEBY }}
        ALCHEMY_API_URL_GOERLI: ${{ fromJSON(inputs.secrets).ALCHEMY_API_URL_GOERLI }}
        SENTRY_DSN: ${{ fromJSON(inputs.secrets).SENTRY_DSN }}
        PUBLIC_SALE_KEY: ${{ fromJSON(inputs.secrets).PUBLIC_SALE_KEY }}
        SERVER_CONFIG: ${{ fromJSON(inputs.secrets).SERVER_CONFIG }}
        SHARED_MINT_SECRET: ${{ fromJSON(inputs.secrets).SHARED_MINT_SECRET }}
        SUPPORTED_NETWORKS: ${{ fromJSON(inputs.secrets).SUPPORTED_NETWORKS }}
        TYPESENSE_HOST: ${{ fromJSON(inputs.secrets).TYPESENSE_HOST }}
        TYPESENSE_API_KEY: ${{ fromJSON(inputs.secrets).TYPESENSE_API_KEY }}
        MINTED_PROFILE_EVENTS_MAX_BLOCKS: ${{ fromJSON(inputs.secrets).MINTED_PROFILE_EVENTS_MAX_BLOCKS }}
        PROFILE_NFTS_EXPIRE_DURATION: ${{ fromJSON(inputs.secrets).PROFILE_NFTS_EXPIRE_DURATION }}
        BULL_MAX_REPEAT_COUNT: ${{ fromJSON(inputs.secrets).BULL_MAX_REPEAT_COUNT }}
        OPENSEA_API_KEY: ${{ fromJSON(inputs.secrets).OPENSEA_API_KEY }}
        PROFILE_SCORE_EXPIRE_DURATION: ${{ fromJSON(inputs.secrets).PROFILE_SCORE_EXPIRE_DURATION }}
        TEST_DB_HOST: ${{ fromJSON(inputs.secrets).TEST_DB_HOST }}
        TEST_DB_DATABASE: ${{ fromJSON(inputs.secrets).TEST_DB_DATABASE }}
        TEST_DB_USERNAME: ${{ fromJSON(inputs.secrets).TEST_DB_USERNAME }}
        TEST_DB_PORT: ${{ fromJSON(inputs.secrets).TEST_DB_PORT }}
        TEST_DB_PASSWORD: ${{ fromJSON(inputs.secrets).TEST_DB_PASSWORD }}
        TEST_DB_USE_SSL: ${{ fromJSON(inputs.secrets).TEST_DB_USE_SSL }}
      run: npm run build:gql:env
    - name: Build and Push GQL Image
      shell: bash
      env:
        REPO: ${{ steps.login_ecr.outputs.registry }}/${{ inputs.stage }}-gql
      run: |
        export DOCKER_BUILDKIT=1
        docker pull ${{ env.REPO }}:deps || true
        docker pull ${{ env.REPO }}:build || true
        docker build . -f gql.Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 --target deps --cache-from ${{ env.REPO }}:deps -t ${{ env.REPO }}:deps
        docker build . -f gql.Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 --target build --cache-from ${{ env.REPO }}:deps --cache-from ${{ env.REPO }}:build -t ${{ env.REPO }}:build
        docker build . -f gql.Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 --target release --cache-from ${{ env.REPO }}:deps --cache-from ${{ env.REPO }}:build -t ${{ env.REPO }}:latest -t ${{ env.REPO }}:${{ github.sha }}
        docker push ${{ env.REPO }}:deps
        docker push ${{ env.REPO }}:build
        docker push ${{ env.REPO }}:latest
        docker push ${{ env.REPO }}:${{ github.sha }}
    - name: Deploy GQL Infra
      shell: bash
      working-directory: infra
      env:
        STAGE: ${{ inputs.stage }}
        PULUMI_CONFIG_PASSPHRASE: ""
        AWS_ACCOUNT_ID: ${{ fromJSON(inputs.secrets).AWS_ACCOUNT_ID }}
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        GIT_SHA: ${{ github.sha }}
      run: npm run deploy:gql
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          typesense:
            - 'infra/typesense/**'
    - name: Deploy Typesense Infra
      if: ${{ steps.filter.outputs.typesense == 'true' || inputs.stage == 'prod' }}
      shell: bash
      working-directory: infra
      env:
        STAGE: ${{ inputs.stage }}
        PULUMI_CONFIG_PASSPHRASE: ""
        AWS_ACCOUNT_ID: ${{ fromJSON(inputs.secrets).AWS_ACCOUNT_ID }}
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        GIT_SHA: ${{ github.sha }}
      run: npm run deploy:typesense
