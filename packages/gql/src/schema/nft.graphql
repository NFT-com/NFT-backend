enum NFTType {
  ERC721
  ERC1155
  UNKNOWN
  Profile
  GenesisKey
  GenesisKeyProfile
}

enum NFTSize {
  Small
  Medium
  Large
}

type NFTTrait {
  type: String!
  value: String!
}

type NFTMetadata {
  name: String
  description: String
  imageURL: String
  traits: [NFTTrait!]!
#  txHash: String!
}

type NFT {
  id: ID!
  chainId: String
  contract: Address
  tokenId: Uint256!
  isOwnedByMe: Boolean
  metadata: NFTMetadata!
  price: Uint256
  profileId: String
  preferredProfile: Profile
  type: NFTType!
#  user: User
  wallet: Wallet
  createdAt: DateTime!
  memo: String
}

input NFTsInput {
  pageInput: PageInput
  types: [NFTType!]
  profileId: ID
  chainId: String
}

input CurationInput {
  curationId: ID!
  pageInput: PageInput
  # TODO: add filters
}

input CollectionNFTsInput {
  collectionAddress: Address!
  chainId: String
  pageInput: PageInput
}

type TokenUri {
    raw: String!
    gateway: String!
}

type NftMedia {
  uri: TokenUri
}

type NftAttributeRecord {
  type: String
  value: String
}

type NftMetadataAlchemy {
  name: String
  description: String
  image: String
  attributes: [NftAttributeRecord]
}

type GetGkNFTSOutput {
  title: String!
  description: String!
  tokenUri: TokenUri
  media: [NftMedia]
  metadata: NftMetadataAlchemy
  timeLastUpdated: String!
  error: String
}

type NFTsOutput {
  items: [NFT!]!
  pageInfo: PageInfo
  totalItems: Int
}

type CurationNFT {
  nft: NFT!
  size: NFTSize
  # TODO: add display preferences here
}

type CurationNFTsOutput {
  items: [CurationNFT!]!
  pageInfo: PageInfo
  totalItems: Int
}

type RefreshMyNFTsOutput {
  status: Boolean!
  message: String
}

input UpdateNFTsForProfileInput {
  profileId: ID!
  chainId: String
  pageInput: PageInput
}

enum SupportedExternalExchange {
  looksrare
  opensea
  x2y2
  rarible
}

type BaseCoin {
  symbol: String
  logoURI: String
  address: String
  decimals: Int
}

type ExternalListing {
  url: String
  exchange: SupportedExternalExchange
  price: String # 18 decimals
  highestOffer: String # 18 decimals
  expiration: DateTime
  creation: DateTime
  baseCoin: BaseCoin
}

type ExternalListingsOutput {
  listings: [ExternalListing]
}

input UpdateAssociatedAddressesInput {
  profileUrl: String!
  chainId: String
}

type UpdateAssociatedAddressesOuput {
  message: String
}

input NftsForCollectionsInput {
  collectionAddresses: [Address!]!
  count: Int!
  chainId: String
}

type CollectionNFT {
  collectionAddress: Address!
  nfts: [NFT!]!
}

extend type Query {
  gkNFTs(tokenId: String!, chainId: String): GetGkNFTSOutput!
  nft(contract: Address!, id: String!, chainId: String): NFT!
  externalListings(contract: Address!, tokenId: String!, chainId: String): ExternalListingsOutput
  nftById(id: ID!): NFT!
  nfts(input: NFTsInput!): CurationNFTsOutput!
  "AUTHETICATED"
  myNFTs(input: NFTsInput): NFTsOutput!
  curationNFTs(input: CurationInput!): CurationNFTsOutput!
  collectionNFTs(input: CollectionNFTsInput!): NFTsOutput!
  nftsForCollections(input: NftsForCollectionsInput!): [CollectionNFT!]!
}

extend type Mutation {
  "AUTHETICATED"
  refreshMyNFTs: RefreshMyNFTsOutput!
  updateNFTsForProfile(input: UpdateNFTsForProfileInput): NFTsOutput!
  updateAssociatedAddresses(input: UpdateAssociatedAddressesInput): UpdateAssociatedAddressesOuput!
  refreshNft(id: ID!, chainId: String): NFT!
  "AUTHETICATED"
  refreshNFTOrder(id: ID!): String!
  "AUTHENTICATED"
  updateNFTMemo(nftId: ID!, memo: String!): NFT!
  "AUTHENTICATED"
  updateNFTProfileId(nftId: ID!, profileId: ID!): NFT!
}
