type GetMarketBid {
  items: [MarketBid!]
  pageInfo: PageInfo
  totalItems: Int
}

type MarketBid {
  structHash: String!
  signature: Signature!
  marketAskId: String!
  makerAddress: Address!
  makeAsset: [MarketplaceAsset!]
  takerAddress: Address
  takeAsset: [MarketplaceAsset!]
  message: String!
  start: String!
  end: String!
  salt: Int!
  offerAcceptedAt: DateTime
  acceptedAt: DateTime
  rejectedAt: DateTime
  rejectedReason: String
  chainId: String!
}

input BidsInput {
  makerAddress: Address
  pageInput: PageInput
}

input CreateBidInput {
  structHash: String!
  signature: SignatureInput!
  marketAskId: String!
  makerAddress: Address!
  makeAsset: [MarketplaceAssetInput!]
  start: String!
  end: String!
  salt: Int!
  chainId: String!
}


extend type Query {
  getBids(input: BidsInput!): GetMarketBid!
}

extend type Mutation {
  createBid(input: CreateBidInput!): MarketBid!
}
