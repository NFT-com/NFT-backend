/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace GenesisKey {
  export type SigStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SigStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface GenesisKeyInterface extends utils.Interface {
  contractName: "GenesisKey";
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelBid(uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "cancelledOrFinalized(bytes32)": FunctionFragment;
    "claimGrantKey(address[])": FunctionFragment;
    "claimKey(uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "claimableBlock(bytes32)": FunctionFragment;
    "finalWethPrice()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getStructHash(uint256,address)": FunctionFragment;
    "initialWethPrice()": FunctionFragment;
    "initialize(string,string,address,address,uint256)": FunctionFragment;
    "initializePublicSale(uint256,uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "multiOwnerOf(uint256,uint256)": FunctionFragment;
    "multiSig()": FunctionFragment;
    "name()": FunctionFragment;
    "numKeysForSale()": FunctionFragment;
    "numKeysPublicPurchased()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicExecuteBid()": FunctionFragment;
    "publicSaleDurationSeconds()": FunctionFragment;
    "publicSaleStartSecond()": FunctionFragment;
    "remainingTeamAdvisorGrant()": FunctionFragment;
    "resetPublicSale()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMultiSig(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPublicSaleDuration(uint256)": FunctionFragment;
    "startPublicSale()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdsOwned(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferETH()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validateBid(uint256,address,(uint8,bytes32,bytes32))": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "whitelistExecuteBid(uint256[],address[],uint8[],bytes32[],bytes32[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrFinalized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGrantKey",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimKey",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalWethPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStructHash",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialWethPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePublicSale",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiOwnerOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "multiSig", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numKeysForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numKeysPublicPurchased",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicExecuteBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleStartSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingTeamAdvisorGrant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setMultiSig", values: [string]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicSaleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdsOwned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBid",
    values: [BigNumberish, string, GenesisKey.SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistExecuteBid",
    values: [
      BigNumberish[],
      string[],
      BigNumberish[],
      BytesLike[],
      BytesLike[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGrantKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalWethPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialWethPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiSig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numKeysForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numKeysPublicPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicExecuteBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleStartSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingTeamAdvisorGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistExecuteBid",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BidCancelled(bytes32)": EventFragment;
    "ClaimedGenesisKey(address,uint256,uint256,bool)": EventFragment;
    "NewClaimableGenKey(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedGenesisKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewClaimableGenKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type BidCancelledEvent = TypedEvent<[string], { hash: string }>;

export type BidCancelledEventFilter = TypedEventFilter<BidCancelledEvent>;

export type ClaimedGenesisKeyEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  {
    _user: string;
    _amount: BigNumber;
    _blockNum: BigNumber;
    _whitelist: boolean;
  }
>;

export type ClaimedGenesisKeyEventFilter =
  TypedEventFilter<ClaimedGenesisKeyEvent>;

export type NewClaimableGenKeyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _user: string; _amount: BigNumber; _blockNum: BigNumber }
>;

export type NewClaimableGenKeyEventFilter =
  TypedEventFilter<NewClaimableGenKeyEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface GenesisKey extends BaseContract {
  contractName: "GenesisKey";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GenesisKeyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelBid(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimGrantKey(
      receivers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimKey(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableBlock(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finalWethPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStructHash(
      _wethTokens: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialWethPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      name: string,
      symbol: string,
      _wethAddress: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePublicSale(
      _initialWethPrice: BigNumberish,
      _finalWethPrice: BigNumberish,
      _numKeysForSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    multiSig(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numKeysForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    numKeysPublicPurchased(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicExecuteBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicSaleDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleStartSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<[BigNumber]>;

    resetPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiSig(
      _newMS: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startPublicSale(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenIdsOwned(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateBid(
      _wethTokens: BigNumberish,
      _owner: string,
      sig: GenesisKey.SigStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    whitelistExecuteBid(
      _wethTokens: BigNumberish[],
      _owners: string[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      _wethMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelBid(
    _wethTokens: BigNumberish,
    _owner: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelledOrFinalized(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimGrantKey(
    receivers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimKey(
    _wethTokens: BigNumberish,
    _owner: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableBlock(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  finalWethPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getStructHash(
    _wethTokens: BigNumberish,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialWethPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    name: string,
    symbol: string,
    _wethAddress: string,
    _multiSig: string,
    _auctionSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePublicSale(
    _initialWethPrice: BigNumberish,
    _finalWethPrice: BigNumberish,
    _numKeysForSale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiOwnerOf(
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  multiSig(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  numKeysForSale(overrides?: CallOverrides): Promise<BigNumber>;

  numKeysPublicPurchased(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  publicExecuteBid(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicSaleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleStartSecond(overrides?: CallOverrides): Promise<BigNumber>;

  remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<BigNumber>;

  resetPublicSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiSig(
    _newMS: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSaleDuration(
    _seconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startPublicSale(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenIdsOwned(user: string, overrides?: CallOverrides): Promise<boolean[]>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateBid(
    _wethTokens: BigNumberish,
    _owner: string,
    sig: GenesisKey.SigStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  whitelistExecuteBid(
    _wethTokens: BigNumberish[],
    _owners: string[],
    v: BigNumberish[],
    r: BytesLike[],
    s: BytesLike[],
    _wethMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelBid(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimGrantKey(
      receivers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimKey(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableBlock(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalWethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getStructHash(
      _wethTokens: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialWethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      _wethAddress: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializePublicSale(
      _initialWethPrice: BigNumberish,
      _finalWethPrice: BigNumberish,
      _numKeysForSale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiSig(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    numKeysForSale(overrides?: CallOverrides): Promise<BigNumber>;

    numKeysPublicPurchased(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    publicExecuteBid(overrides?: CallOverrides): Promise<void>;

    publicSaleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStartSecond(overrides?: CallOverrides): Promise<BigNumber>;

    remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<BigNumber>;

    resetPublicSale(overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiSig(_newMS: string, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startPublicSale(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenIdsOwned(user: string, overrides?: CallOverrides): Promise<boolean[]>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferETH(overrides?: CallOverrides): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateBid(
      _wethTokens: BigNumberish,
      _owner: string,
      sig: GenesisKey.SigStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    whitelistExecuteBid(
      _wethTokens: BigNumberish[],
      _owners: string[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      _wethMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BidCancelled(bytes32)"(hash?: BytesLike | null): BidCancelledEventFilter;
    BidCancelled(hash?: BytesLike | null): BidCancelledEventFilter;

    "ClaimedGenesisKey(address,uint256,uint256,bool)"(
      _user?: string | null,
      _amount?: null,
      _blockNum?: null,
      _whitelist?: null
    ): ClaimedGenesisKeyEventFilter;
    ClaimedGenesisKey(
      _user?: string | null,
      _amount?: null,
      _blockNum?: null,
      _whitelist?: null
    ): ClaimedGenesisKeyEventFilter;

    "NewClaimableGenKey(address,uint256,uint256)"(
      _user?: string | null,
      _amount?: null,
      _blockNum?: null
    ): NewClaimableGenKeyEventFilter;
    NewClaimableGenKey(
      _user?: string | null,
      _amount?: null,
      _blockNum?: null
    ): NewClaimableGenKeyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelBid(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimGrantKey(
      receivers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimKey(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableBlock(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalWethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getStructHash(
      _wethTokens: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialWethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      _wethAddress: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePublicSale(
      _initialWethPrice: BigNumberish,
      _finalWethPrice: BigNumberish,
      _numKeysForSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSig(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numKeysForSale(overrides?: CallOverrides): Promise<BigNumber>;

    numKeysPublicPurchased(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicExecuteBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicSaleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStartSecond(overrides?: CallOverrides): Promise<BigNumber>;

    remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<BigNumber>;

    resetPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiSig(
      _newMS: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startPublicSale(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdsOwned(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateBid(
      _wethTokens: BigNumberish,
      _owner: string,
      sig: GenesisKey.SigStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistExecuteBid(
      _wethTokens: BigNumberish[],
      _owners: string[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      _wethMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelBid(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimGrantKey(
      receivers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimKey(
      _wethTokens: BigNumberish,
      _owner: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableBlock(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalWethPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStructHash(
      _wethTokens: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialWethPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      name: string,
      symbol: string,
      _wethAddress: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePublicSale(
      _initialWethPrice: BigNumberish,
      _finalWethPrice: BigNumberish,
      _numKeysForSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numKeysForSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numKeysPublicPurchased(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicExecuteBid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicSaleDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleStartSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingTeamAdvisorGrant(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetPublicSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiSig(
      _newMS: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startPublicSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdsOwned(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateBid(
      _wethTokens: BigNumberish,
      _owner: string,
      sig: GenesisKey.SigStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistExecuteBid(
      _wethTokens: BigNumberish[],
      _owners: string[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      _wethMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
