/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Market {
  export type OrderItemStruct = { price: BigNumberish; data: BytesLike };

  export type OrderItemStructOutput = [BigNumber, string] & {
    price: BigNumber;
    data: string;
  };

  export type FeeStruct = { percentage: BigNumberish; to: string };

  export type FeeStructOutput = [BigNumber, string] & {
    percentage: BigNumber;
    to: string;
  };

  export type SettleDetailStruct = {
    op: BigNumberish;
    orderIdx: BigNumberish;
    itemIdx: BigNumberish;
    price: BigNumberish;
    itemHash: BytesLike;
    executionDelegate: string;
    dataReplacement: BytesLike;
    bidIncentivePct: BigNumberish;
    aucMinIncrementPct: BigNumberish;
    aucIncDurationSecs: BigNumberish;
    fees: Market.FeeStruct[];
  };

  export type SettleDetailStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    Market.FeeStructOutput[]
  ] & {
    op: number;
    orderIdx: BigNumber;
    itemIdx: BigNumber;
    price: BigNumber;
    itemHash: string;
    executionDelegate: string;
    dataReplacement: string;
    bidIncentivePct: BigNumber;
    aucMinIncrementPct: BigNumber;
    aucIncDurationSecs: BigNumber;
    fees: Market.FeeStructOutput[];
  };

  export type OrderStruct = {
    salt: BigNumberish;
    user: string;
    network: BigNumberish;
    intent: BigNumberish;
    delegateType: BigNumberish;
    deadline: BigNumberish;
    currency: string;
    dataMask: BytesLike;
    items: Market.OrderItemStruct[];
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    signVersion: BigNumberish;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    Market.OrderItemStructOutput[],
    string,
    string,
    number,
    number
  ] & {
    salt: BigNumber;
    user: string;
    network: BigNumber;
    intent: BigNumber;
    delegateType: BigNumber;
    deadline: BigNumber;
    currency: string;
    dataMask: string;
    items: Market.OrderItemStructOutput[];
    r: string;
    s: string;
    v: number;
    signVersion: number;
  };

  export type SettleSharedStruct = {
    salt: BigNumberish;
    deadline: BigNumberish;
    amountToEth: BigNumberish;
    amountToWeth: BigNumberish;
    user: string;
    canFail: boolean;
  };

  export type SettleSharedStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    salt: BigNumber;
    deadline: BigNumber;
    amountToEth: BigNumber;
    amountToWeth: BigNumber;
    user: string;
    canFail: boolean;
  };

  export type RunInputStruct = {
    orders: Market.OrderStruct[];
    details: Market.SettleDetailStruct[];
    shared: Market.SettleSharedStruct;
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
  };

  export type RunInputStructOutput = [
    Market.OrderStructOutput[],
    Market.SettleDetailStructOutput[],
    Market.SettleSharedStructOutput,
    string,
    string,
    number
  ] & {
    orders: Market.OrderStructOutput[];
    details: Market.SettleDetailStructOutput[];
    shared: Market.SettleSharedStructOutput;
    r: string;
    s: string;
    v: number;
  };
}

export interface X2Y2Interface extends utils.Interface {
  contractName: "X2Y2";
  functions: {
    "RATE_BASE()": FunctionFragment;
    "cancel(bytes32[],uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "feeCapPct()": FunctionFragment;
    "initialize(uint256,address)": FunctionFragment;
    "inventoryStatus(bytes32)": FunctionFragment;
    "ongoingAuctions(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "run(((uint256,address,uint256,uint256,uint256,uint256,address,bytes,(uint256,bytes)[],bytes32,bytes32,uint8,uint8)[],(uint8,uint256,uint256,uint256,bytes32,address,bytes,uint256,uint256,uint256,(uint256,address)[])[],(uint256,uint256,uint256,uint256,address,bool),bytes32,bytes32,uint8))": FunctionFragment;
    "run1((uint256,address,uint256,uint256,uint256,uint256,address,bytes,(uint256,bytes)[],bytes32,bytes32,uint8,uint8),(uint256,uint256,uint256,uint256,address,bool),(uint8,uint256,uint256,uint256,bytes32,address,bytes,uint256,uint256,uint256,(uint256,address)[]))": FunctionFragment;
    "signers(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDelegates(address[],address[])": FunctionFragment;
    "updateFeeCap(uint256)": FunctionFragment;
    "updateSigners(address[],address[])": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RATE_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BytesLike[], BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(functionFragment: "feeCapPct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ongoingAuctions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "run",
    values: [Market.RunInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "run1",
    values: [
      Market.OrderStruct,
      Market.SettleSharedStruct,
      Market.SettleDetailStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "signers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDelegates",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSigners",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "RATE_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeCapPct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inventoryStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ongoingAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "run1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "EvAuctionRefund(bytes32,address,address,uint256,uint256)": EventFragment;
    "EvCancel(bytes32)": EventFragment;
    "EvDelegate(address,bool)": EventFragment;
    "EvFailure(uint256,bytes)": EventFragment;
    "EvFeeCapUpdate(uint256)": EventFragment;
    "EvInventory(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address,bytes,tuple,tuple)": EventFragment;
    "EvProfit(bytes32,address,address,uint256)": EventFragment;
    "EvSigner(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EvAuctionRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvFeeCapUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvInventory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvProfit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type EvAuctionRefundEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    itemHash: string;
    currency: string;
    to: string;
    amount: BigNumber;
    incentive: BigNumber;
  }
>;

export type EvAuctionRefundEventFilter = TypedEventFilter<EvAuctionRefundEvent>;

export type EvCancelEvent = TypedEvent<[string], { itemHash: string }>;

export type EvCancelEventFilter = TypedEventFilter<EvCancelEvent>;

export type EvDelegateEvent = TypedEvent<
  [string, boolean],
  { delegate: string; isRemoval: boolean }
>;

export type EvDelegateEventFilter = TypedEventFilter<EvDelegateEvent>;

export type EvFailureEvent = TypedEvent<
  [BigNumber, string],
  { index: BigNumber; error: string }
>;

export type EvFailureEventFilter = TypedEventFilter<EvFailureEvent>;

export type EvFeeCapUpdateEvent = TypedEvent<
  [BigNumber],
  { newValue: BigNumber }
>;

export type EvFeeCapUpdateEventFilter = TypedEventFilter<EvFeeCapUpdateEvent>;

export type EvInventoryEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    Market.OrderItemStructOutput,
    Market.SettleDetailStructOutput
  ],
  {
    itemHash: string;
    maker: string;
    taker: string;
    orderSalt: BigNumber;
    settleSalt: BigNumber;
    intent: BigNumber;
    delegateType: BigNumber;
    deadline: BigNumber;
    currency: string;
    dataMask: string;
    item: Market.OrderItemStructOutput;
    detail: Market.SettleDetailStructOutput;
  }
>;

export type EvInventoryEventFilter = TypedEventFilter<EvInventoryEvent>;

export type EvProfitEvent = TypedEvent<
  [string, string, string, BigNumber],
  { itemHash: string; currency: string; to: string; amount: BigNumber }
>;

export type EvProfitEventFilter = TypedEventFilter<EvProfitEvent>;

export type EvSignerEvent = TypedEvent<
  [string, boolean],
  { signer: string; isRemoval: boolean }
>;

export type EvSignerEventFilter = TypedEventFilter<EvSignerEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface X2Y2 extends BaseContract {
  contractName: "X2Y2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: X2Y2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RATE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      itemHashes: BytesLike[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    feeCapPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      feeCapPct_: BigNumberish,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventoryStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    ongoingAuctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        price: BigNumber;
        netPrice: BigNumber;
        endAt: BigNumber;
        bidder: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    run(
      input: Market.RunInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    run1(
      order: Market.OrderStruct,
      shared: Market.SettleSharedStruct,
      detail: Market.SettleDetailStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDelegates(
      toAdd: string[],
      toRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeCap(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSigners(
      toAdd: string[],
      toRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    itemHashes: BytesLike[],
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  feeCapPct(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    feeCapPct_: BigNumberish,
    weth_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventoryStatus(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  ongoingAuctions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      price: BigNumber;
      netPrice: BigNumber;
      endAt: BigNumber;
      bidder: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  run(
    input: Market.RunInputStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  run1(
    order: Market.OrderStruct,
    shared: Market.SettleSharedStruct,
    detail: Market.SettleDetailStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDelegates(
    toAdd: string[],
    toRemove: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeCap(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSigners(
    toAdd: string[],
    toRemove: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      itemHashes: BytesLike[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    feeCapPct(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      feeCapPct_: BigNumberish,
      weth_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    inventoryStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    ongoingAuctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        price: BigNumber;
        netPrice: BigNumber;
        endAt: BigNumber;
        bidder: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    run(input: Market.RunInputStruct, overrides?: CallOverrides): Promise<void>;

    run1(
      order: Market.OrderStruct,
      shared: Market.SettleSharedStruct,
      detail: Market.SettleDetailStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDelegates(
      toAdd: string[],
      toRemove: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeCap(val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateSigners(
      toAdd: string[],
      toRemove: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EvAuctionRefund(bytes32,address,address,uint256,uint256)"(
      itemHash?: BytesLike | null,
      currency?: null,
      to?: null,
      amount?: null,
      incentive?: null
    ): EvAuctionRefundEventFilter;
    EvAuctionRefund(
      itemHash?: BytesLike | null,
      currency?: null,
      to?: null,
      amount?: null,
      incentive?: null
    ): EvAuctionRefundEventFilter;

    "EvCancel(bytes32)"(itemHash?: BytesLike | null): EvCancelEventFilter;
    EvCancel(itemHash?: BytesLike | null): EvCancelEventFilter;

    "EvDelegate(address,bool)"(
      delegate?: null,
      isRemoval?: null
    ): EvDelegateEventFilter;
    EvDelegate(delegate?: null, isRemoval?: null): EvDelegateEventFilter;

    "EvFailure(uint256,bytes)"(
      index?: null,
      error?: null
    ): EvFailureEventFilter;
    EvFailure(index?: null, error?: null): EvFailureEventFilter;

    "EvFeeCapUpdate(uint256)"(newValue?: null): EvFeeCapUpdateEventFilter;
    EvFeeCapUpdate(newValue?: null): EvFeeCapUpdateEventFilter;

    "EvInventory(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address,bytes,tuple,tuple)"(
      itemHash?: BytesLike | null,
      maker?: null,
      taker?: null,
      orderSalt?: null,
      settleSalt?: null,
      intent?: null,
      delegateType?: null,
      deadline?: null,
      currency?: null,
      dataMask?: null,
      item?: null,
      detail?: null
    ): EvInventoryEventFilter;
    EvInventory(
      itemHash?: BytesLike | null,
      maker?: null,
      taker?: null,
      orderSalt?: null,
      settleSalt?: null,
      intent?: null,
      delegateType?: null,
      deadline?: null,
      currency?: null,
      dataMask?: null,
      item?: null,
      detail?: null
    ): EvInventoryEventFilter;

    "EvProfit(bytes32,address,address,uint256)"(
      itemHash?: null,
      currency?: null,
      to?: null,
      amount?: null
    ): EvProfitEventFilter;
    EvProfit(
      itemHash?: null,
      currency?: null,
      to?: null,
      amount?: null
    ): EvProfitEventFilter;

    "EvSigner(address,bool)"(
      signer?: null,
      isRemoval?: null
    ): EvSignerEventFilter;
    EvSigner(signer?: null, isRemoval?: null): EvSignerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      itemHashes: BytesLike[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeCapPct(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      feeCapPct_: BigNumberish,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventoryStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ongoingAuctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    run(
      input: Market.RunInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    run1(
      order: Market.OrderStruct,
      shared: Market.SettleSharedStruct,
      detail: Market.SettleDetailStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDelegates(
      toAdd: string[],
      toRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeCap(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSigners(
      toAdd: string[],
      toRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    RATE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      itemHashes: BytesLike[],
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCapPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      feeCapPct_: BigNumberish,
      weth_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventoryStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ongoingAuctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    run(
      input: Market.RunInputStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    run1(
      order: Market.OrderStruct,
      shared: Market.SettleSharedStruct,
      detail: Market.SettleDetailStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDelegates(
      toAdd: string[],
      toRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeCap(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSigners(
      toAdd: string[],
      toRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
