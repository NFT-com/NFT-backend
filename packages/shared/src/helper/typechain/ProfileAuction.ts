/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ProfileAuctionInterface extends utils.Interface {
  contractName: "ProfileAuction";
  functions: {
    "extendRent(string,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "genKeyWhitelistOnly()": FunctionFragment;
    "genesisKeyClaimNumber(uint256)": FunctionFragment;
    "genesisKeyClaimProfile(string,uint256,address)": FunctionFragment;
    "genesisKeyContract()": FunctionFragment;
    "genesisStakingContract()": FunctionFragment;
    "getFee(string,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "lengthPremium(uint256)": FunctionFragment;
    "nftBuyer()": FunctionFragment;
    "nftProfile()": FunctionFragment;
    "nftProfileHelperAddress()": FunctionFragment;
    "nftToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "publicFee()": FunctionFragment;
    "publicMint(string,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "publicMintBool()": FunctionFragment;
    "purchaseExpiredProfile(string,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "setGenKeyWhitelistOnly(bool)": FunctionFragment;
    "setLengthPremium(uint256,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPublicFee(uint256)": FunctionFragment;
    "setPublicMint(bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "extendRent",
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "genKeyWhitelistOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisKeyClaimNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisKeyClaimProfile",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisKeyContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisStakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lengthPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nftBuyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftProfileHelperAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "publicFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicMint",
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicMintBool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseExpiredProfile",
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGenKeyWhitelistOnly",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLengthPremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicMint",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "extendRent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genKeyWhitelistOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisKeyClaimNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisKeyClaimProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisKeyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lengthPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftBuyer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftProfileHelperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicMintBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseExpiredProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGenKeyWhitelistOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLengthPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ExtendRent(address,string,uint256,uint256,bool)": EventFragment;
    "MintedProfile(address,string,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtendRent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type ExtendRentEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, boolean],
  {
    _receiver: string;
    _profileUrl: string;
    _duration: BigNumber;
    _fee: BigNumber;
    _expired: boolean;
  }
>;

export type ExtendRentEventFilter = TypedEventFilter<ExtendRentEvent>;

export type MintedProfileEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { _user: string; _val: string; _duration: BigNumber; _fee: BigNumber }
>;

export type MintedProfileEventFilter = TypedEventFilter<MintedProfileEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ProfileAuction extends BaseContract {
  contractName: "ProfileAuction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProfileAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    extendRent(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genKeyWhitelistOnly(overrides?: CallOverrides): Promise<[boolean]>;

    genesisKeyClaimNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    genesisKeyClaimProfile(
      profileUrl: string,
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisKeyContract(overrides?: CallOverrides): Promise<[string]>;

    genesisStakingContract(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      profileUrl: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _nftToken: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _nftBuyer: string,
      _genesisKeyContract: string,
      _genesisStakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lengthPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftBuyer(overrides?: CallOverrides): Promise<[string]>;

    nftProfile(overrides?: CallOverrides): Promise<[string]>;

    nftProfileHelperAddress(overrides?: CallOverrides): Promise<[string]>;

    nftToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publicFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicMint(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicMintBool(overrides?: CallOverrides): Promise<[boolean]>;

    purchaseExpiredProfile(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGenKeyWhitelistOnly(
      _genKeyWhitelistOnly: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLengthPremium(
      _length: BigNumberish,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicMint(
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  extendRent(
    profileUrl: string,
    duration: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genKeyWhitelistOnly(overrides?: CallOverrides): Promise<boolean>;

  genesisKeyClaimNumber(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genesisKeyClaimProfile(
    profileUrl: string,
    tokenId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisKeyContract(overrides?: CallOverrides): Promise<string>;

  genesisStakingContract(overrides?: CallOverrides): Promise<string>;

  getFee(
    profileUrl: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _nftToken: string,
    _nftProfile: string,
    _governor: string,
    _nftProfileHelperAddress: string,
    _nftBuyer: string,
    _genesisKeyContract: string,
    _genesisStakingContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lengthPremium(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftBuyer(overrides?: CallOverrides): Promise<string>;

  nftProfile(overrides?: CallOverrides): Promise<string>;

  nftProfileHelperAddress(overrides?: CallOverrides): Promise<string>;

  nftToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  publicFee(overrides?: CallOverrides): Promise<BigNumber>;

  publicMint(
    profileUrl: string,
    duration: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicMintBool(overrides?: CallOverrides): Promise<boolean>;

  purchaseExpiredProfile(
    profileUrl: string,
    duration: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGenKeyWhitelistOnly(
    _genKeyWhitelistOnly: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLengthPremium(
    _length: BigNumberish,
    _premium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _new: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicMint(
    _val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    extendRent(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    genKeyWhitelistOnly(overrides?: CallOverrides): Promise<boolean>;

    genesisKeyClaimNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisKeyClaimProfile(
      profileUrl: string,
      tokenId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    genesisKeyContract(overrides?: CallOverrides): Promise<string>;

    genesisStakingContract(overrides?: CallOverrides): Promise<string>;

    getFee(
      profileUrl: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _nftToken: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _nftBuyer: string,
      _genesisKeyContract: string,
      _genesisStakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lengthPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftBuyer(overrides?: CallOverrides): Promise<string>;

    nftProfile(overrides?: CallOverrides): Promise<string>;

    nftProfileHelperAddress(overrides?: CallOverrides): Promise<string>;

    nftToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    publicFee(overrides?: CallOverrides): Promise<BigNumber>;

    publicMint(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    publicMintBool(overrides?: CallOverrides): Promise<boolean>;

    purchaseExpiredProfile(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGenKeyWhitelistOnly(
      _genKeyWhitelistOnly: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLengthPremium(
      _length: BigNumberish,
      _premium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_new: string, overrides?: CallOverrides): Promise<void>;

    setPublicFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPublicMint(_val: boolean, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ExtendRent(address,string,uint256,uint256,bool)"(
      _receiver?: null,
      _profileUrl?: null,
      _duration?: null,
      _fee?: null,
      _expired?: null
    ): ExtendRentEventFilter;
    ExtendRent(
      _receiver?: null,
      _profileUrl?: null,
      _duration?: null,
      _fee?: null,
      _expired?: null
    ): ExtendRentEventFilter;

    "MintedProfile(address,string,uint256,uint256)"(
      _user?: null,
      _val?: null,
      _duration?: null,
      _fee?: null
    ): MintedProfileEventFilter;
    MintedProfile(
      _user?: null,
      _val?: null,
      _duration?: null,
      _fee?: null
    ): MintedProfileEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    extendRent(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genKeyWhitelistOnly(overrides?: CallOverrides): Promise<BigNumber>;

    genesisKeyClaimNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisKeyClaimProfile(
      profileUrl: string,
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisKeyContract(overrides?: CallOverrides): Promise<BigNumber>;

    genesisStakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      profileUrl: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _nftToken: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _nftBuyer: string,
      _genesisKeyContract: string,
      _genesisStakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lengthPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftBuyer(overrides?: CallOverrides): Promise<BigNumber>;

    nftProfile(overrides?: CallOverrides): Promise<BigNumber>;

    nftProfileHelperAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publicFee(overrides?: CallOverrides): Promise<BigNumber>;

    publicMint(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicMintBool(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseExpiredProfile(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGenKeyWhitelistOnly(
      _genKeyWhitelistOnly: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLengthPremium(
      _length: BigNumberish,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicMint(
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    extendRent(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genKeyWhitelistOnly(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisKeyClaimNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisKeyClaimProfile(
      profileUrl: string,
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisKeyContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisStakingContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      profileUrl: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _nftToken: string,
      _nftProfile: string,
      _governor: string,
      _nftProfileHelperAddress: string,
      _nftBuyer: string,
      _genesisKeyContract: string,
      _genesisStakingContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lengthPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftBuyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftProfileHelperAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicMint(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicMintBool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseExpiredProfile(
      profileUrl: string,
      duration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGenKeyWhitelistOnly(
      _genKeyWhitelistOnly: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLengthPremium(
      _length: BigNumberish,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicMint(
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
