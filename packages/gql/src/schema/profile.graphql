
type FollowersOutput {
  items: [Wallet!]!
  pageInfo: PageInfo
  totalItems: Int
}

input FollowersInput {
  profileId: ID!
  pageInput: PageInput
}

enum ProfileStatus {
  Available
  Pending
  Owned
}

enum ProfileDisplayType {
  NFT
  Collection
}

enum ProfileLayoutType {
  Default
  Mosaic
  Featured
  Spotlight
}

enum ProfileViewType {
  Collection
  Gallery
}

enum ProfileSortType {
  RecentMinted
  RecentUpdated
  MostVisibleNFTs
}

type Profile {
  id: ID!
  index: Int
  bannerURL: String
  createdAt: DateTime!
  chainId: String
  description: String
  displayType: ProfileDisplayType
  layoutType: ProfileLayoutType
  followersCount: Int
  isFollowedByMe: Boolean
  isOwnedByMe: Boolean
  gkIconVisible: Boolean
  nftsDescriptionsVisible: Boolean
  deployedContractsVisible: Boolean
  owner: Wallet
  tokenId: String
  photoURL: String
  status: ProfileStatus
  url: String!
  winningBid: Bid
  profileView: ProfileViewType
  visibleNFTs: Int
}

type LeaderboardProfile {
  index: Int
  id: ID!
  url: String!
  photoURL: String
  numberOfGenesisKeys: Int
  numberOfCollections: Int
  itemsVisible: Int
}

input ProfilesInput {
  pageInput: PageInput
  statuses: [ProfileStatus]
}

type ProfilesOutput {
  items: [Profile!]!
  pageInfo: PageInfo
  totalItems: Int
}

input UpdateProfileInput {
  id: ID!
  bannerURL: String
  description: String
  photoURL: String
  showNFTIds: [String]
  hideNFTIds: [String]
  showAllNFTs: Boolean
  hideAllNFTs: Boolean
  gkIconVisible: Boolean
  nftsDescriptionsVisible: Boolean
  deployedContractsVisible: Boolean
  displayType: ProfileDisplayType
  layoutType: ProfileLayoutType
}

input ProfileClaimedInput {
  profileId: ID!
  walletId: ID!
  txHash: String!
}

input MintGKProfileInput {
  startIndex: Int
  count: Int
}

input InsiderReservedProfilesInput {
  address: Address!
}

input UploadProfileImagesInput {
  profileId: ID!
  banner: Upload
  avatar: Upload
  description: String
  compositeProfileURL: Boolean!
}

input CreateCompositeImageInput {
  profileId: ID!
}

input LatestProfilesInput {
  pageInput: PageInput
  chainId: String
  sortBy: ProfileSortType
}

input OrderUpdateInput {
  nftId: ID!
  newIndex: Int!
}

input OrderingUpdatesInput {
  profileId: ID!
  updates: [OrderUpdateInput!]!
}

input LeaderboardInput {
  chainId: String
  count: Int
  pageInput: PageInput
}

type LeaderboardOutput {
  items: [LeaderboardProfile!]!
  pageInfo: PageInfo
  totalItems: Int
}

input SaveScoreForProfilesInput {
  count: Int
  nullOnly: Boolean
}

type SaveScoreForProfilesOutput {
  message: String
}

type ClearGKIconVisibleOutput {
  message: String
}

input UpdateProfileViewInput {
  url: String!
  profileViewType: ProfileViewType!
}

type SaveNFTVisibilityForProfilesOutput {
  message: String
}

input IgnoredEventsInput {
  profileUrl: String!
  walletAddress: Address!
  chainId: String
}

extend type Query {
  profileFollowers(input: FollowersInput!): FollowersOutput!
  "AUTHENTICATED"
  profilesFollowedByMe(input: ProfilesInput): ProfilesOutput!
  "AUTHENTICATED"
  myProfiles(input: ProfilesInput): ProfilesOutput!
  profile(url: String!, chainId: String): Profile!
  profilePassive(url: String!, chainId: String): Profile!
  blockedProfileURI(url: String!, blockReserved: Boolean!): Boolean!
  "AUTHENTICATED"
  insiderReservedProfiles(input: InsiderReservedProfilesInput!): [String!]!
  latestProfiles(input: LatestProfilesInput): ProfilesOutput!
  leaderboard(input: LeaderboardInput): LeaderboardOutput!
  ignoredEvents(input: IgnoredEventsInput!): [Event!]!
  associatedCollectionForProfile(url: String!, chainId: String): CollectionInfo!
  isProfileCustomized(url: String!, chainId: String): Boolean!
}

extend type Mutation {
  "AUTHENTICATED"
  followProfile(url: String): Profile!
  "AUTHENTICATED"
  unfollowProfile(id: ID!): Profile!
  "AUTHENTICATED"
  updateProfile(input: UpdateProfileInput!): Profile!
  "AUTHENTICATED"
  profileClaimed(input: ProfileClaimedInput!): Profile!
  mintGKProfile(input: MintGKProfileInput): String!
  "AUTHENTICATED"
  uploadProfileImages(input: UploadProfileImagesInput): Profile!
  "AUTHENTICATED"
  createCompositeImage(input: CreateCompositeImageInput): Profile!
  "AUTHENTICATED"
  orderingUpdates(input: OrderingUpdatesInput!): Profile!
  "AUTHENTICATED"
  saveScoreForProfiles(input: SaveScoreForProfilesInput!): SaveScoreForProfilesOutput!
  "AUTHENTICATED"
  clearGKIconVisible: ClearGKIconVisibleOutput!
  "AUTHENTICATED"
  updateProfileView(input: UpdateProfileViewInput): Profile!
  "AUTHENTICATED"
  saveNFTVisibilityForProfiles(count: Int!): SaveNFTVisibilityForProfilesOutput!
}
