enum AssetClass {
  ETH
  ERC20
  ERC721
  ERC1155
}

enum AuctionType {
  FixedPrice
  English
  Decreasing
}

enum ListingSortType {
  RecentlyCreated
  RecentlySold
  EndingSoon
  Oldest
}

type GetListingOrders {
  items: [TxOrder!]
  pageInfo: PageInfo
  totalItems: Int
}

type GetBidOrders {
  items: [TxOrder!]
  pageInfo: PageInfo
  totalItems: Int
}

type AssetType {
  assetClass: AssetClass!
  bytes: String!
  contractAddress: Address!
  tokenId: Uint256!
  allowAll: Boolean!
}

type MarketplaceAsset {
  standard: AssetType!
  nftId: String
  bytes: String!
  value: Uint256!
  minimumBid: Uint256!
}

type TxListingOrder {
  id: ID!
  orderHash: String!
  nonce: Int!
  signature: Signature!
  makerAddress: Address!
  makeAsset: [MarketplaceAsset!]
  start: DateTime!
  end: DateTime!
  salt: Int!
  acceptedAt: DateTime
  chainId: String!
  auctionType: AuctionType!
}

type TxBidOrder {
  id: ID!
  orderHash: String!
  nonce: Int!
  signature: Signature!
  makerAddress: Address!
  makeAsset: [MarketplaceAsset!]
  takerAddress: Address!
  takeAsset: [MarketplaceAsset!]
  start: DateTime!
  end: DateTime!
  salt: Int!
  acceptedAt: DateTime
  rejectedAt: DateTime
  chainId: String!
  auctionType: AuctionType!
}

input ListingsInput {
  makerAddress: Address
  pageInput: PageInput
  chainId: String
}

input NftListingsInput {
  nftTokenId: Uint256!
  nftContractAddress: Address!
  makerAddress: Address
  chainId: String
}

input AssetTypeInput {
  assetClass: AssetClass!
  bytes: String!
  contractAddress: String!
  tokenId: Uint256
  allowAll: Boolean!
}

input MarketplaceAssetInput {
  standard: AssetTypeInput!
  bytes: String!
  value: Uint256!
  minimumBid: Uint256!
}

input CreateListingInput {
  structHash: String!
  nonce: Int!
  auctionType: AuctionType!
  signature: SignatureInput!
  makerAddress: Address!
  makeAsset: [MarketplaceAssetInput!]
  takerAddress: Address!
  takeAsset: [MarketplaceAssetInput!]
  start: Int!
  end: Int!
  salt: Int!
  chainId: String!
}

input CreateBidInput {
  structHash: String!
  nonce: Int!
  auctionType: AuctionType!
  signature: SignatureInput!
  listingId: String!
  makerAddress: Address!
  makeAsset: [MarketplaceAssetInput!]
  takerAddress: Address!
  takeAsset: [MarketplaceAssetInput!]
  start: Int!
  end: Int!
  salt: Int!
  chainId: String!
  message: String
}

input CancelListingInput {
  listingOrderId: ID!
  txHash: String!
}

input CancelBidInput {
  bidOrderId: ID!
  txHash: String!
}

input BuyNowInput {
  listingOrderId: ID!
  txHash: String!
}

input FilterListingInput {
  auctionType: AuctionType
  sortBy: ListingSortType
  chainId: String
  pageInput: PageInput!
}

input MarketBidsInput {
  makerAddress: Address
  listingOrderId: String
  pageInput: PageInput
  chainId: String
}

extend type Query {
  getListings(input: ListingsInput!): GetListingOrders!
  getNFTListings(input: NftListingsInput!): [TxListingOrder!]!
  filterListings(input: FilterListingInput!): GetListingOrders!
  getBids(input: MarketBidsInput!): GetBidOrders!
}

extend type Mutation {
  "AUTHENTICATED"
  createMarketListing(input: CreateListingInput!): TxListingOrder!
  "AUTHENTICATED"
  cancelMarketListing(input: CancelListingInput!): Boolean!
  "AUTHENTICATED"
  buyNow(input: BuyNowInput!): MarketSwap!
  "AUTHENTICATED"
  createMarketBid(input: CreateBidInput!): TxBidOrder!
  "AUTHENTICATED"
  cancelMarketBid(input: CancelBidInput!): Boolean!
}
